=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

OpenAPI spec version: 3
Contact: support@combase.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module KoronaClient

  class Receipt
    # indicates whether the object is active for use or not
    attr_accessor :active

    # global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
    attr_accessor :id

    # number of the object, like it is set in backoffice; will be removed when active=false
    attr_accessor :number

    # the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
    attr_accessor :revision

    attr_accessor :account_transactions

    attr_accessor :booking_time

    attr_accessor :cashier

    attr_accessor :creation_time

    attr_accessor :currency

    attr_accessor :customer

    attr_accessor :customer_group

    attr_accessor :customer_order

    attr_accessor :deposit_amount

    attr_accessor :geo_location

    attr_accessor :items

    attr_accessor :organizational_unit

    attr_accessor :payments

    attr_accessor :point_of_sale

    attr_accessor :price_group

    attr_accessor :voided

    attr_accessor :zcounter


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'id' => :'id',
        :'number' => :'number',
        :'revision' => :'revision',
        :'account_transactions' => :'accountTransactions',
        :'booking_time' => :'bookingTime',
        :'cashier' => :'cashier',
        :'creation_time' => :'creationTime',
        :'currency' => :'currency',
        :'customer' => :'customer',
        :'customer_group' => :'customerGroup',
        :'customer_order' => :'customerOrder',
        :'deposit_amount' => :'depositAmount',
        :'geo_location' => :'geoLocation',
        :'items' => :'items',
        :'organizational_unit' => :'organizationalUnit',
        :'payments' => :'payments',
        :'point_of_sale' => :'pointOfSale',
        :'price_group' => :'priceGroup',
        :'voided' => :'voided',
        :'zcounter' => :'zcounter'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active' => :'BOOLEAN',
        :'id' => :'String',
        :'number' => :'String',
        :'revision' => :'Integer',
        :'account_transactions' => :'Array<AccountTransaction>',
        :'booking_time' => :'DateTime',
        :'cashier' => :'ModelReference',
        :'creation_time' => :'DateTime',
        :'currency' => :'ModelReference',
        :'customer' => :'ModelReference',
        :'customer_group' => :'ModelReference',
        :'customer_order' => :'ModelReference',
        :'deposit_amount' => :'Float',
        :'geo_location' => :'GeoLocation',
        :'items' => :'Array<ReceiptItem>',
        :'organizational_unit' => :'ModelReference',
        :'payments' => :'Array<Payment>',
        :'point_of_sale' => :'ModelReference',
        :'price_group' => :'ModelReference',
        :'voided' => :'BOOLEAN',
        :'zcounter' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.has_key?(:'accountTransactions')
        if (value = attributes[:'accountTransactions']).is_a?(Array)
          self.account_transactions = value
        end
      end

      if attributes.has_key?(:'bookingTime')
        self.booking_time = attributes[:'bookingTime']
      end

      if attributes.has_key?(:'cashier')
        self.cashier = attributes[:'cashier']
      end

      if attributes.has_key?(:'creationTime')
        self.creation_time = attributes[:'creationTime']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'customerGroup')
        self.customer_group = attributes[:'customerGroup']
      end

      if attributes.has_key?(:'customerOrder')
        self.customer_order = attributes[:'customerOrder']
      end

      if attributes.has_key?(:'depositAmount')
        self.deposit_amount = attributes[:'depositAmount']
      end

      if attributes.has_key?(:'geoLocation')
        self.geo_location = attributes[:'geoLocation']
      end

      if attributes.has_key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.has_key?(:'organizationalUnit')
        self.organizational_unit = attributes[:'organizationalUnit']
      end

      if attributes.has_key?(:'payments')
        if (value = attributes[:'payments']).is_a?(Array)
          self.payments = value
        end
      end

      if attributes.has_key?(:'pointOfSale')
        self.point_of_sale = attributes[:'pointOfSale']
      end

      if attributes.has_key?(:'priceGroup')
        self.price_group = attributes[:'priceGroup']
      end

      if attributes.has_key?(:'voided')
        self.voided = attributes[:'voided']
      end

      if attributes.has_key?(:'zcounter')
        self.zcounter = attributes[:'zcounter']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          id == o.id &&
          number == o.number &&
          revision == o.revision &&
          account_transactions == o.account_transactions &&
          booking_time == o.booking_time &&
          cashier == o.cashier &&
          creation_time == o.creation_time &&
          currency == o.currency &&
          customer == o.customer &&
          customer_group == o.customer_group &&
          customer_order == o.customer_order &&
          deposit_amount == o.deposit_amount &&
          geo_location == o.geo_location &&
          items == o.items &&
          organizational_unit == o.organizational_unit &&
          payments == o.payments &&
          point_of_sale == o.point_of_sale &&
          price_group == o.price_group &&
          voided == o.voided &&
          zcounter == o.zcounter
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active, id, number, revision, account_transactions, booking_time, cashier, creation_time, currency, customer, customer_group, customer_order, deposit_amount, geo_location, items, organizational_unit, payments, point_of_sale, price_group, voided, zcounter].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = KoronaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
