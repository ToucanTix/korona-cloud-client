=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

OpenAPI spec version: 3
Contact: support@combase.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module KoronaClient

  class StockReceipt
    # indicates whether the object is active for use or not
    attr_accessor :active

    # global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
    attr_accessor :id

    # number of the object, like it is set in backoffice; will be removed when active=false
    attr_accessor :number

    # the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
    attr_accessor :revision

    attr_accessor :arrival_date

    attr_accessor :booking_time

    attr_accessor :booking_user

    attr_accessor :cashier

    attr_accessor :create_time

    attr_accessor :create_user

    attr_accessor :customer

    attr_accessor :description

    attr_accessor :dispatch_notification

    attr_accessor :items_count

    attr_accessor :organizational_unit

    attr_accessor :party_information

    attr_accessor :point_of_sale

    attr_accessor :product_stock_order

    attr_accessor :source_organizational_unit

    attr_accessor :supplier

    attr_accessor :status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'id' => :'id',
        :'number' => :'number',
        :'revision' => :'revision',
        :'arrival_date' => :'arrivalDate',
        :'booking_time' => :'bookingTime',
        :'booking_user' => :'bookingUser',
        :'cashier' => :'cashier',
        :'create_time' => :'createTime',
        :'create_user' => :'createUser',
        :'customer' => :'customer',
        :'description' => :'description',
        :'dispatch_notification' => :'dispatchNotification',
        :'items_count' => :'itemsCount',
        :'organizational_unit' => :'organizationalUnit',
        :'party_information' => :'partyInformation',
        :'point_of_sale' => :'pointOfSale',
        :'product_stock_order' => :'productStockOrder',
        :'source_organizational_unit' => :'sourceOrganizationalUnit',
        :'supplier' => :'supplier',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active' => :'BOOLEAN',
        :'id' => :'String',
        :'number' => :'String',
        :'revision' => :'Integer',
        :'arrival_date' => :'DateTime',
        :'booking_time' => :'DateTime',
        :'booking_user' => :'ModelReference',
        :'cashier' => :'ModelReference',
        :'create_time' => :'DateTime',
        :'create_user' => :'ModelReference',
        :'customer' => :'ModelReference',
        :'description' => :'String',
        :'dispatch_notification' => :'ModelReference',
        :'items_count' => :'Integer',
        :'organizational_unit' => :'ModelReference',
        :'party_information' => :'ProductTransferInvolvedPartyInformation',
        :'point_of_sale' => :'ModelReference',
        :'product_stock_order' => :'ModelReference',
        :'source_organizational_unit' => :'ModelReference',
        :'supplier' => :'ModelReference',
        :'status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.has_key?(:'arrivalDate')
        self.arrival_date = attributes[:'arrivalDate']
      end

      if attributes.has_key?(:'bookingTime')
        self.booking_time = attributes[:'bookingTime']
      end

      if attributes.has_key?(:'bookingUser')
        self.booking_user = attributes[:'bookingUser']
      end

      if attributes.has_key?(:'cashier')
        self.cashier = attributes[:'cashier']
      end

      if attributes.has_key?(:'createTime')
        self.create_time = attributes[:'createTime']
      end

      if attributes.has_key?(:'createUser')
        self.create_user = attributes[:'createUser']
      end

      if attributes.has_key?(:'customer')
        self.customer = attributes[:'customer']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'dispatchNotification')
        self.dispatch_notification = attributes[:'dispatchNotification']
      end

      if attributes.has_key?(:'itemsCount')
        self.items_count = attributes[:'itemsCount']
      end

      if attributes.has_key?(:'organizationalUnit')
        self.organizational_unit = attributes[:'organizationalUnit']
      end

      if attributes.has_key?(:'partyInformation')
        self.party_information = attributes[:'partyInformation']
      end

      if attributes.has_key?(:'pointOfSale')
        self.point_of_sale = attributes[:'pointOfSale']
      end

      if attributes.has_key?(:'productStockOrder')
        self.product_stock_order = attributes[:'productStockOrder']
      end

      if attributes.has_key?(:'sourceOrganizationalUnit')
        self.source_organizational_unit = attributes[:'sourceOrganizationalUnit']
      end

      if attributes.has_key?(:'supplier')
        self.supplier = attributes[:'supplier']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["BOOKED", "IN_PROGRESS"])
      return false unless status_validator.valid?(@status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["BOOKED", "IN_PROGRESS"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          id == o.id &&
          number == o.number &&
          revision == o.revision &&
          arrival_date == o.arrival_date &&
          booking_time == o.booking_time &&
          booking_user == o.booking_user &&
          cashier == o.cashier &&
          create_time == o.create_time &&
          create_user == o.create_user &&
          customer == o.customer &&
          description == o.description &&
          dispatch_notification == o.dispatch_notification &&
          items_count == o.items_count &&
          organizational_unit == o.organizational_unit &&
          party_information == o.party_information &&
          point_of_sale == o.point_of_sale &&
          product_stock_order == o.product_stock_order &&
          source_organizational_unit == o.source_organizational_unit &&
          supplier == o.supplier &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active, id, number, revision, arrival_date, booking_time, booking_user, cashier, create_time, create_user, customer, description, dispatch_notification, items_count, organizational_unit, party_information, point_of_sale, product_stock_order, source_organizational_unit, supplier, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = KoronaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
