=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

OpenAPI spec version: 3
Contact: support@combase.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module KoronaClient

  class Pos
    # indicates whether the object is active for use or not
    attr_accessor :active

    # global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
    attr_accessor :id

    # number of the object, like it is set in backoffice; will be removed when active=false
    attr_accessor :number

    # the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
    attr_accessor :revision

    attr_accessor :coupled

    attr_accessor :coupling_id

    attr_accessor :default_customer_group

    attr_accessor :default_payment_method

    attr_accessor :device_information

    attr_accessor :external

    attr_accessor :last_receipt_number

    attr_accessor :last_z_count

    attr_accessor :name

    attr_accessor :organizational_unit

    attr_accessor :print_footer_lines

    attr_accessor :print_header_lines

    attr_accessor :receipt_info_texts

    attr_accessor :use_alternative_sector


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'id' => :'id',
        :'number' => :'number',
        :'revision' => :'revision',
        :'coupled' => :'coupled',
        :'coupling_id' => :'couplingId',
        :'default_customer_group' => :'defaultCustomerGroup',
        :'default_payment_method' => :'defaultPaymentMethod',
        :'device_information' => :'deviceInformation',
        :'external' => :'external',
        :'last_receipt_number' => :'lastReceiptNumber',
        :'last_z_count' => :'lastZCount',
        :'name' => :'name',
        :'organizational_unit' => :'organizationalUnit',
        :'print_footer_lines' => :'printFooterLines',
        :'print_header_lines' => :'printHeaderLines',
        :'receipt_info_texts' => :'receiptInfoTexts',
        :'use_alternative_sector' => :'useAlternativeSector'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'active' => :'BOOLEAN',
        :'id' => :'String',
        :'number' => :'String',
        :'revision' => :'Integer',
        :'coupled' => :'BOOLEAN',
        :'coupling_id' => :'String',
        :'default_customer_group' => :'ModelReference',
        :'default_payment_method' => :'ModelReference',
        :'device_information' => :'DeviceInformation',
        :'external' => :'BOOLEAN',
        :'last_receipt_number' => :'String',
        :'last_z_count' => :'Integer',
        :'name' => :'String',
        :'organizational_unit' => :'ModelReference',
        :'print_footer_lines' => :'Hash<String, String>',
        :'print_header_lines' => :'Hash<String, String>',
        :'receipt_info_texts' => :'Array<ModelReference>',
        :'use_alternative_sector' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.has_key?(:'coupled')
        self.coupled = attributes[:'coupled']
      end

      if attributes.has_key?(:'couplingId')
        self.coupling_id = attributes[:'couplingId']
      end

      if attributes.has_key?(:'defaultCustomerGroup')
        self.default_customer_group = attributes[:'defaultCustomerGroup']
      end

      if attributes.has_key?(:'defaultPaymentMethod')
        self.default_payment_method = attributes[:'defaultPaymentMethod']
      end

      if attributes.has_key?(:'deviceInformation')
        self.device_information = attributes[:'deviceInformation']
      end

      if attributes.has_key?(:'external')
        self.external = attributes[:'external']
      end

      if attributes.has_key?(:'lastReceiptNumber')
        self.last_receipt_number = attributes[:'lastReceiptNumber']
      end

      if attributes.has_key?(:'lastZCount')
        self.last_z_count = attributes[:'lastZCount']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'organizationalUnit')
        self.organizational_unit = attributes[:'organizationalUnit']
      end

      if attributes.has_key?(:'printFooterLines')
        if (value = attributes[:'printFooterLines']).is_a?(Hash)
          self.print_footer_lines = value
        end
      end

      if attributes.has_key?(:'printHeaderLines')
        if (value = attributes[:'printHeaderLines']).is_a?(Hash)
          self.print_header_lines = value
        end
      end

      if attributes.has_key?(:'receiptInfoTexts')
        if (value = attributes[:'receiptInfoTexts']).is_a?(Array)
          self.receipt_info_texts = value
        end
      end

      if attributes.has_key?(:'useAlternativeSector')
        self.use_alternative_sector = attributes[:'useAlternativeSector']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          id == o.id &&
          number == o.number &&
          revision == o.revision &&
          coupled == o.coupled &&
          coupling_id == o.coupling_id &&
          default_customer_group == o.default_customer_group &&
          default_payment_method == o.default_payment_method &&
          device_information == o.device_information &&
          external == o.external &&
          last_receipt_number == o.last_receipt_number &&
          last_z_count == o.last_z_count &&
          name == o.name &&
          organizational_unit == o.organizational_unit &&
          print_footer_lines == o.print_footer_lines &&
          print_header_lines == o.print_header_lines &&
          receipt_info_texts == o.receipt_info_texts &&
          use_alternative_sector == o.use_alternative_sector
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [active, id, number, revision, coupled, coupling_id, default_customer_group, default_payment_method, device_information, external, last_receipt_number, last_z_count, name, organizational_unit, print_footer_lines, print_header_lines, receipt_info_texts, use_alternative_sector].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = KoronaClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
