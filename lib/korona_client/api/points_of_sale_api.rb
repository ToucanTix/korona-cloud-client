=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

OpenAPI spec version: 3
Contact: support@combase.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module KoronaClient
  class PointsOfSaleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # adds a batch of point of sale-related end-of-day-statements
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param coupling_id the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EndOfDayStatement>] :body the end-of-day-statements to add
    # @return [Array<AddOrUpdateResult>]
    def add_point_of_sale_end_of_day_statements(korona_account_id, point_of_sale_id_or_number, coupling_id, opts = {})
      data, _status_code, _headers = add_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id_or_number, coupling_id, opts)
      return data
    end

    # adds a batch of point of sale-related end-of-day-statements
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param coupling_id the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EndOfDayStatement>] :body the end-of-day-statements to add
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id_or_number, coupling_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.add_point_of_sale_end_of_day_statements ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.add_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.add_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'coupling_id' is set
      if @api_client.config.client_side_validation && coupling_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupling_id' when calling PointsOfSaleApi.add_point_of_sale_end_of_day_statements"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}/endOfDayStatements".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = coupling_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#add_point_of_sale_end_of_day_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds a batch of point of sale-related receipts
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param coupling_id the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Receipt>] :body the receipts to add
    # @return [Array<AddOrUpdateResult>]
    def add_point_of_sale_receipts(korona_account_id, point_of_sale_id_or_number, coupling_id, opts = {})
      data, _status_code, _headers = add_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id_or_number, coupling_id, opts)
      return data
    end

    # adds a batch of point of sale-related receipts
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param coupling_id the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Receipt>] :body the receipts to add
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id_or_number, coupling_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.add_point_of_sale_receipts ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.add_point_of_sale_receipts"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.add_point_of_sale_receipts"
      end
      # verify the required parameter 'coupling_id' is set
      if @api_client.config.client_side_validation && coupling_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupling_id' when calling PointsOfSaleApi.add_point_of_sale_receipts"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}/receipts".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = coupling_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#add_point_of_sale_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists the point of sale
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number the number of the point of sale
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @return [Pos]
    def get_point_of_sale(korona_account_id, point_of_sale_id_or_number, opts = {})
      data, _status_code, _headers = get_point_of_sale_with_http_info(korona_account_id, point_of_sale_id_or_number, opts)
      return data
    end

    # lists the point of sale
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number the number of the point of sale
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @return [Array<(Pos, Fixnum, Hash)>] Pos data, response status code and response headers
    def get_point_of_sale_with_http_info(korona_account_id, point_of_sale_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.get_point_of_sale ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.get_point_of_sale"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Pos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all point of sale-related end-of-day-statements
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param coupling_id the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [ResultListEndOfDayStatement]
    def get_point_of_sale_end_of_day_statements(korona_account_id, point_of_sale_id_or_number, coupling_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id_or_number, coupling_id, opts)
      return data
    end

    # lists all point of sale-related end-of-day-statements
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param coupling_id the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [Array<(ResultListEndOfDayStatement, Fixnum, Hash)>] ResultListEndOfDayStatement data, response status code and response headers
    def get_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id_or_number, coupling_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.get_point_of_sale_end_of_day_statements ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.get_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'coupling_id' is set
      if @api_client.config.client_side_validation && coupling_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupling_id' when calling PointsOfSaleApi.get_point_of_sale_end_of_day_statements"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}/endOfDayStatements".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = coupling_id
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListEndOfDayStatement')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_end_of_day_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists a single point of sale-related receipt
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param receipt_id the id of the receipt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @return [Receipt]
    def get_point_of_sale_receipt(korona_account_id, point_of_sale_id_or_number, receipt_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_receipt_with_http_info(korona_account_id, point_of_sale_id_or_number, receipt_id, opts)
      return data
    end

    # lists a single point of sale-related receipt
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param receipt_id the id of the receipt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @return [Array<(Receipt, Fixnum, Hash)>] Receipt data, response status code and response headers
    def get_point_of_sale_receipt_with_http_info(korona_account_id, point_of_sale_id_or_number, receipt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.get_point_of_sale_receipt ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_receipt"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.get_point_of_sale_receipt"
      end
      # verify the required parameter 'receipt_id' is set
      if @api_client.config.client_side_validation && receipt_id.nil?
        fail ArgumentError, "Missing the required parameter 'receipt_id' when calling PointsOfSaleApi.get_point_of_sale_receipt"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}/receipts/{receiptId}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s).sub('{' + 'receiptId' + '}', receipt_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Receipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all point of sale-related receipts
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Integer] :z_count z-count of the receipt
    # @option opts [DateTime] :min_create_time min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_create_time max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @return [ResultListReceipt]
    def get_point_of_sale_receipts(korona_account_id, point_of_sale_id_or_number, opts = {})
      data, _status_code, _headers = get_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id_or_number, opts)
      return data
    end

    # lists all point of sale-related receipts
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Integer] :z_count z-count of the receipt
    # @option opts [DateTime] :min_create_time min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_create_time max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @return [Array<(ResultListReceipt, Fixnum, Hash)>] ResultListReceipt data, response status code and response headers
    def get_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.get_point_of_sale_receipts ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_receipts"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.get_point_of_sale_receipts"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}/receipts".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'zCount'] = opts[:'z_count'] if !opts[:'z_count'].nil?
      query_params[:'minCreateTime'] = opts[:'min_create_time'] if !opts[:'min_create_time'].nil?
      query_params[:'maxCreateTime'] = opts[:'max_create_time'] if !opts[:'max_create_time'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all point of sales
    # 
    # @param korona_account_id the account id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [ResultListPos]
    def get_points_of_sale(korona_account_id, opts = {})
      data, _status_code, _headers = get_points_of_sale_with_http_info(korona_account_id, opts)
      return data
    end

    # lists all point of sales
    # 
    # @param korona_account_id the account id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [Array<(ResultListPos, Fixnum, Hash)>] ResultListPos data, response status code and response headers
    def get_points_of_sale_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.get_points_of_sale ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_points_of_sale"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListPos')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_points_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates a point of sale (works only for coupling (attribute 'couplingId') or updating device information (attribute 'deviceInformation'))
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body the properties to update of the point of sale (&#39;couplingId&#39; only)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device (required if already coupled)
    # @option opts [BOOLEAN] :decouple executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled
    # @return [nil]
    def update_point_of_sale(korona_account_id, point_of_sale_id_or_number, body, opts = {})
      update_point_of_sale_with_http_info(korona_account_id, point_of_sale_id_or_number, body, opts)
      return nil
    end

    # updates a point of sale (works only for coupling (attribute &#39;couplingId&#39;) or updating device information (attribute &#39;deviceInformation&#39;))
    # 
    # @param korona_account_id the account id
    # @param point_of_sale_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body the properties to update of the point of sale (&#39;couplingId&#39; only)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device (required if already coupled)
    # @option opts [BOOLEAN] :decouple executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_point_of_sale_with_http_info(korona_account_id, point_of_sale_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PointsOfSaleApi.update_point_of_sale ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.update_point_of_sale"
      end
      # verify the required parameter 'point_of_sale_id_or_number' is set
      if @api_client.config.client_side_validation && point_of_sale_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id_or_number' when calling PointsOfSaleApi.update_point_of_sale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PointsOfSaleApi.update_point_of_sale"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'pointOfSaleIdOrNumber' + '}', point_of_sale_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?
      query_params[:'decouple'] = opts[:'decouple'] if !opts[:'decouple'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#update_point_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
