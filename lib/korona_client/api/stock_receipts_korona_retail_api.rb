=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

OpenAPI spec version: 3
Contact: support@combase.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module KoronaClient
  class StockReceiptsKORONARetailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # adds stock-receipt items
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_stock_receipt_items(korona_account_id, stock_receipt_id_or_number, body, opts = {})
      data, _status_code, _headers = add_stock_receipt_items_with_http_info(korona_account_id, stock_receipt_id_or_number, body, opts)
      return data
    end

    # adds stock-receipt items
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_stock_receipt_items_with_http_info(korona_account_id, stock_receipt_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.add_stock_receipt_items ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.add_stock_receipt_items"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.add_stock_receipt_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StockReceiptsKORONARetailApi.add_stock_receipt_items"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}/items".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#add_stock_receipt_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds stock-receipts
    # 
    # @param korona_account_id the account id
    # @param body data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_stock_receipts(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_stock_receipts_with_http_info(korona_account_id, body, opts)
      return data
    end

    # adds stock-receipts
    # 
    # @param korona_account_id the account id
    # @param body data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_stock_receipts_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.add_stock_receipts ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.add_stock_receipts"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StockReceiptsKORONARetailApi.add_stock_receipts"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#add_stock_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the stock-receipt item
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_stock_receipt_item(korona_account_id, stock_receipt_id_or_number, product_id_or_number, opts = {})
      delete_stock_receipt_item_with_http_info(korona_account_id, stock_receipt_id_or_number, product_id_or_number, opts)
      return nil
    end

    # deletes the stock-receipt item
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_stock_receipt_item_with_http_info(korona_account_id, stock_receipt_id_or_number, product_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.delete_stock_receipt_item ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.delete_stock_receipt_item"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.delete_stock_receipt_item"
      end
      # verify the required parameter 'product_id_or_number' is set
      if @api_client.config.client_side_validation && product_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'product_id_or_number' when calling StockReceiptsKORONARetailApi.delete_stock_receipt_item"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}/items/{productIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s).sub('{' + 'productIdOrNumber' + '}', product_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#delete_stock_receipt_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists the stock-receipt
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [StockReceipt]
    def get_stock_receipt(korona_account_id, stock_receipt_id_or_number, opts = {})
      data, _status_code, _headers = get_stock_receipt_with_http_info(korona_account_id, stock_receipt_id_or_number, opts)
      return data
    end

    # lists the stock-receipt
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(StockReceipt, Fixnum, Hash)>] StockReceipt data, response status code and response headers
    def get_stock_receipt_with_http_info(korona_account_id, stock_receipt_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.get_stock_receipt ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.get_stock_receipt"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.get_stock_receipt"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StockReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#get_stock_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists the stock-receipt item
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [StockReceiptItem]
    def get_stock_receipt_item(korona_account_id, stock_receipt_id_or_number, product_id_or_number, opts = {})
      data, _status_code, _headers = get_stock_receipt_item_with_http_info(korona_account_id, stock_receipt_id_or_number, product_id_or_number, opts)
      return data
    end

    # lists the stock-receipt item
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(StockReceiptItem, Fixnum, Hash)>] StockReceiptItem data, response status code and response headers
    def get_stock_receipt_item_with_http_info(korona_account_id, stock_receipt_id_or_number, product_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.get_stock_receipt_item ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.get_stock_receipt_item"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.get_stock_receipt_item"
      end
      # verify the required parameter 'product_id_or_number' is set
      if @api_client.config.client_side_validation && product_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'product_id_or_number' when calling StockReceiptsKORONARetailApi.get_stock_receipt_item"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}/items/{productIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s).sub('{' + 'productIdOrNumber' + '}', product_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StockReceiptItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#get_stock_receipt_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all stock-receipt items
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [ResultListStockReceiptItem]
    def get_stock_receipt_items(korona_account_id, stock_receipt_id_or_number, opts = {})
      data, _status_code, _headers = get_stock_receipt_items_with_http_info(korona_account_id, stock_receipt_id_or_number, opts)
      return data
    end

    # lists all stock-receipt items
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [Array<(ResultListStockReceiptItem, Fixnum, Hash)>] ResultListStockReceiptItem data, response status code and response headers
    def get_stock_receipt_items_with_http_info(korona_account_id, stock_receipt_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.get_stock_receipt_items ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.get_stock_receipt_items"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.get_stock_receipt_items"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}/items".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListStockReceiptItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#get_stock_receipt_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all stock-receipts
    # 
    # @param korona_account_id the account id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [DateTime] :min_create_time min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_create_time max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [String] :organizational_unit organizational unit
    # @option opts [String] :source_organizational_unit source organizational unit
    # @option opts [String] :booking_status booking status (possible values: BOOKED, IN_PROGRESS)
    # @return [ResultListStockReceipt]
    def get_stock_receipts(korona_account_id, opts = {})
      data, _status_code, _headers = get_stock_receipts_with_http_info(korona_account_id, opts)
      return data
    end

    # lists all stock-receipts
    # 
    # @param korona_account_id the account id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [DateTime] :min_create_time min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_create_time max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [String] :organizational_unit organizational unit
    # @option opts [String] :source_organizational_unit source organizational unit
    # @option opts [String] :booking_status booking status (possible values: BOOKED, IN_PROGRESS)
    # @return [Array<(ResultListStockReceipt, Fixnum, Hash)>] ResultListStockReceipt data, response status code and response headers
    def get_stock_receipts_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.get_stock_receipts ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.get_stock_receipts"
      end
      if @api_client.config.client_side_validation && opts[:'booking_status'] && !['BOOKED', 'IN_PROGRESS'].include?(opts[:'booking_status'])
        fail ArgumentError, 'invalid value for "booking_status", must be one of BOOKED, IN_PROGRESS'
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'minCreateTime'] = opts[:'min_create_time'] if !opts[:'min_create_time'].nil?
      query_params[:'maxCreateTime'] = opts[:'max_create_time'] if !opts[:'max_create_time'].nil?
      query_params[:'minBookingTime'] = opts[:'min_booking_time'] if !opts[:'min_booking_time'].nil?
      query_params[:'maxBookingTime'] = opts[:'max_booking_time'] if !opts[:'max_booking_time'].nil?
      query_params[:'organizationalUnit'] = opts[:'organizational_unit'] if !opts[:'organizational_unit'].nil?
      query_params[:'sourceOrganizationalUnit'] = opts[:'source_organizational_unit'] if !opts[:'source_organizational_unit'].nil?
      query_params[:'bookingStatus'] = opts[:'booking_status'] if !opts[:'booking_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListStockReceipt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#get_stock_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the stock-receipt
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_stock_receipt(korona_account_id, stock_receipt_id_or_number, body, opts = {})
      update_stock_receipt_with_http_info(korona_account_id, stock_receipt_id_or_number, body, opts)
      return nil
    end

    # updates the stock-receipt
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_stock_receipt_with_http_info(korona_account_id, stock_receipt_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.update_stock_receipt ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.update_stock_receipt"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.update_stock_receipt"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StockReceiptsKORONARetailApi.update_stock_receipt"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#update_stock_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the stock-receipt item
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_stock_receipt_item(korona_account_id, stock_receipt_id_or_number, product_id_or_number, body, opts = {})
      update_stock_receipt_item_with_http_info(korona_account_id, stock_receipt_id_or_number, product_id_or_number, body, opts)
      return nil
    end

    # updates the stock-receipt item
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_stock_receipt_item_with_http_info(korona_account_id, stock_receipt_id_or_number, product_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.update_stock_receipt_item ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.update_stock_receipt_item"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.update_stock_receipt_item"
      end
      # verify the required parameter 'product_id_or_number' is set
      if @api_client.config.client_side_validation && product_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'product_id_or_number' when calling StockReceiptsKORONARetailApi.update_stock_receipt_item"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StockReceiptsKORONARetailApi.update_stock_receipt_item"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}/items/{productIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s).sub('{' + 'productIdOrNumber' + '}', product_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#update_stock_receipt_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates stock-receipt items
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_stock_receipt_items(korona_account_id, stock_receipt_id_or_number, body, opts = {})
      data, _status_code, _headers = update_stock_receipt_items_with_http_info(korona_account_id, stock_receipt_id_or_number, body, opts)
      return data
    end

    # updates stock-receipt items
    # 
    # @param korona_account_id the account id
    # @param stock_receipt_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_stock_receipt_items_with_http_info(korona_account_id, stock_receipt_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StockReceiptsKORONARetailApi.update_stock_receipt_items ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StockReceiptsKORONARetailApi.update_stock_receipt_items"
      end
      # verify the required parameter 'stock_receipt_id_or_number' is set
      if @api_client.config.client_side_validation && stock_receipt_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'stock_receipt_id_or_number' when calling StockReceiptsKORONARetailApi.update_stock_receipt_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StockReceiptsKORONARetailApi.update_stock_receipt_items"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/stockReceipts/{stockReceiptIdOrNumber}/items".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'stockReceiptIdOrNumber' + '}', stock_receipt_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StockReceiptsKORONARetailApi#update_stock_receipt_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
