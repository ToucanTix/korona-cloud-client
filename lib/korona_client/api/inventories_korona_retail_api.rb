=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

OpenAPI spec version: 3
Contact: support@combase.net
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module KoronaClient
  class InventoriesKORONARetailApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # adds a batch of new inventories
    # 
    # @param korona_account_id the account id
    # @param body a array of new inventories
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_inventories(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_inventories_with_http_info(korona_account_id, body, opts)
      return data
    end

    # adds a batch of new inventories
    # 
    # @param korona_account_id the account id
    # @param body a array of new inventories
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_inventories_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.add_inventories ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.add_inventories"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesKORONARetailApi.add_inventories"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#add_inventories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds inventory list items
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_inventory_inventory_list_items(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts = {})
      data, _status_code, _headers = add_inventory_inventory_list_items_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts)
      return data
    end

    # adds inventory list items
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_inventory_inventory_list_items_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.add_inventory_inventory_list_items ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.add_inventory_inventory_list_items"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.add_inventory_inventory_list_items"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.add_inventory_inventory_list_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesKORONARetailApi.add_inventory_inventory_list_items"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#add_inventory_inventory_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the inventory; only possible if hasBookedReceipts=false
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_inventory(korona_account_id, inventory_id_or_number, opts = {})
      delete_inventory_with_http_info(korona_account_id, inventory_id_or_number, opts)
      return nil
    end

    # deletes the inventory; only possible if hasBookedReceipts&#x3D;false
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_inventory_with_http_info(korona_account_id, inventory_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.delete_inventory ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.delete_inventory"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.delete_inventory"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#delete_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the inventory list item
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_inventory_inventory_list_item(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, opts = {})
      delete_inventory_inventory_list_item_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, opts)
      return nil
    end

    # deletes the inventory list item
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_inventory_inventory_list_item_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.delete_inventory_inventory_list_item ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.delete_inventory_inventory_list_item"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.delete_inventory_inventory_list_item"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.delete_inventory_inventory_list_item"
      end
      # verify the required parameter 'product_id_or_number' is set
      if @api_client.config.client_side_validation && product_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'product_id_or_number' when calling InventoriesKORONARetailApi.delete_inventory_inventory_list_item"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items/{productIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s).sub('{' + 'productIdOrNumber' + '}', product_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#delete_inventory_inventory_list_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all inventories
    # 
    # @param korona_account_id the account id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [ResultListInventory]
    def get_inventories(korona_account_id, opts = {})
      data, _status_code, _headers = get_inventories_with_http_info(korona_account_id, opts)
      return data
    end

    # lists all inventories
    # 
    # @param korona_account_id the account id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [Array<(ResultListInventory, Fixnum, Hash)>] ResultListInventory data, response status code and response headers
    def get_inventories_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.get_inventories ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.get_inventories"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListInventory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#get_inventories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists the inventory
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Inventory]
    def get_inventory(korona_account_id, inventory_id_or_number, opts = {})
      data, _status_code, _headers = get_inventory_with_http_info(korona_account_id, inventory_id_or_number, opts)
      return data
    end

    # lists the inventory
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inventory, Fixnum, Hash)>] Inventory data, response status code and response headers
    def get_inventory_with_http_info(korona_account_id, inventory_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.get_inventory ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.get_inventory"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.get_inventory"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Inventory')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#get_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists the inventory list
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [InventoryList]
    def get_inventory_inventory_list(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, opts = {})
      data, _status_code, _headers = get_inventory_inventory_list_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, opts)
      return data
    end

    # lists the inventory list
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryList, Fixnum, Hash)>] InventoryList data, response status code and response headers
    def get_inventory_inventory_list_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.get_inventory_inventory_list ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.get_inventory_inventory_list"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InventoryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#get_inventory_inventory_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists the inventory list item with the specified product
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [InventoryListItem]
    def get_inventory_inventory_list_item(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, opts = {})
      data, _status_code, _headers = get_inventory_inventory_list_item_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, opts)
      return data
    end

    # lists the inventory list item with the specified product
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryListItem, Fixnum, Hash)>] InventoryListItem data, response status code and response headers
    def get_inventory_inventory_list_item_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.get_inventory_inventory_list_item ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_item"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_item"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_item"
      end
      # verify the required parameter 'product_id_or_number' is set
      if @api_client.config.client_side_validation && product_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'product_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_item"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items/{productIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s).sub('{' + 'productIdOrNumber' + '}', product_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InventoryListItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#get_inventory_inventory_list_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all inventory list items
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [ResultListInventoryListItem]
    def get_inventory_inventory_list_items(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, opts = {})
      data, _status_code, _headers = get_inventory_inventory_list_items_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, opts)
      return data
    end

    # lists all inventory list items
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [Array<(ResultListInventoryListItem, Fixnum, Hash)>] ResultListInventoryListItem data, response status code and response headers
    def get_inventory_inventory_list_items_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.get_inventory_inventory_list_items ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_items"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_items"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_list_items"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListInventoryListItem')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#get_inventory_inventory_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all inventory lists
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [DateTime] :min_create_time min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_create_time max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [String] :booking_status booking status (possible values: BOOKED, IN_PROGRESS)
    # @return [ResultListInventoryList]
    def get_inventory_inventory_lists(korona_account_id, inventory_id_or_number, opts = {})
      data, _status_code, _headers = get_inventory_inventory_lists_with_http_info(korona_account_id, inventory_id_or_number, opts)
      return data
    end

    # lists all inventory lists
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [BOOLEAN] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [DateTime] :min_create_time min (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_create_time max (inclusive) create time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [DateTime] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; date, time and timezone)
    # @option opts [String] :booking_status booking status (possible values: BOOKED, IN_PROGRESS)
    # @return [Array<(ResultListInventoryList, Fixnum, Hash)>] ResultListInventoryList data, response status code and response headers
    def get_inventory_inventory_lists_with_http_info(korona_account_id, inventory_id_or_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.get_inventory_inventory_lists ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.get_inventory_inventory_lists"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.get_inventory_inventory_lists"
      end
      if @api_client.config.client_side_validation && opts[:'booking_status'] && !['BOOKED', 'IN_PROGRESS'].include?(opts[:'booking_status'])
        fail ArgumentError, 'invalid value for "booking_status", must be one of BOOKED, IN_PROGRESS'
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'minCreateTime'] = opts[:'min_create_time'] if !opts[:'min_create_time'].nil?
      query_params[:'maxCreateTime'] = opts[:'max_create_time'] if !opts[:'max_create_time'].nil?
      query_params[:'minBookingTime'] = opts[:'min_booking_time'] if !opts[:'min_booking_time'].nil?
      query_params[:'maxBookingTime'] = opts[:'max_booking_time'] if !opts[:'max_booking_time'].nil?
      query_params[:'bookingStatus'] = opts[:'booking_status'] if !opts[:'booking_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResultListInventoryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#get_inventory_inventory_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # changes the inventory
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body the properties to update of the inventory
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory(korona_account_id, inventory_id_or_number, body, opts = {})
      update_inventory_with_http_info(korona_account_id, inventory_id_or_number, body, opts)
      return nil
    end

    # changes the inventory
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body the properties to update of the inventory
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_inventory_with_http_info(korona_account_id, inventory_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.update_inventory ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.update_inventory"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.update_inventory"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesKORONARetailApi.update_inventory"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#update_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the inventory list
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory_inventory_list(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts = {})
      update_inventory_inventory_list_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts)
      return nil
    end

    # updates the inventory list
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_inventory_inventory_list_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.update_inventory_inventory_list ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.update_inventory_inventory_list"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesKORONARetailApi.update_inventory_inventory_list"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#update_inventory_inventory_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the inventory list item
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory_inventory_list_item(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, body, opts = {})
      update_inventory_inventory_list_item_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, body, opts)
      return nil
    end

    # updates the inventory list item
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param product_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_inventory_inventory_list_item_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, product_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.update_inventory_inventory_list_item ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_item"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_item"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_item"
      end
      # verify the required parameter 'product_id_or_number' is set
      if @api_client.config.client_side_validation && product_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'product_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_item"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_item"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items/{productIdOrNumber}".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s).sub('{' + 'productIdOrNumber' + '}', product_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#update_inventory_inventory_list_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates inventory list items (property [product] required))
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body a array of inventory list items to update
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_inventory_inventory_list_items(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts = {})
      data, _status_code, _headers = update_inventory_inventory_list_items_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts)
      return data
    end

    # updates inventory list items (property [product] required))
    # 
    # @param korona_account_id the account id
    # @param inventory_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param inventory_list_id_or_number id or number of the related object (important: if a number should match the uuid-format, the system will lookup for an id instead of a number)
    # @param body a array of inventory list items to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Fixnum, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_inventory_inventory_list_items_with_http_info(korona_account_id, inventory_id_or_number, inventory_list_id_or_number, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InventoriesKORONARetailApi.update_inventory_inventory_list_items ..."
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_items"
      end
      # verify the required parameter 'inventory_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_items"
      end
      # verify the required parameter 'inventory_list_id_or_number' is set
      if @api_client.config.client_side_validation && inventory_list_id_or_number.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id_or_number' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesKORONARetailApi.update_inventory_inventory_list_items"
      end
      # resource path
      local_var_path = "/accounts/{koronaAccountId}/inventories/{inventoryIdOrNumber}/inventoryLists/{inventoryListIdOrNumber}/items".sub('{' + 'koronaAccountId' + '}', korona_account_id.to_s).sub('{' + 'inventoryIdOrNumber' + '}', inventory_id_or_number.to_s).sub('{' + 'inventoryListIdOrNumber' + '}', inventory_list_id_or_number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['basicAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<AddOrUpdateResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesKORONARetailApi#update_inventory_inventory_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
