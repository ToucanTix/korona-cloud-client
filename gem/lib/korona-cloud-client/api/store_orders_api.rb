=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.19.20
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module KoronaCloudClient
  class StoreOrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # adds store order items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<StoreOrderItem>] data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_store_order_items(korona_account_id, store_order_id, body, opts = {})
      data, _status_code, _headers = add_store_order_items_with_http_info(korona_account_id, store_order_id, body, opts)
      data
    end

    # adds store order items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<StoreOrderItem>] data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_store_order_items_with_http_info(korona_account_id, store_order_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.add_store_order_items ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.add_store_order_items"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.add_store_order_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StoreOrdersApi.add_store_order_items"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.add_store_order_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#add_store_order_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds store orders
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<StoreOrder>] data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_store_orders(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_store_orders_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds store orders
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<StoreOrder>] data to add
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_store_orders_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.add_store_orders ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.add_store_orders"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StoreOrdersApi.add_store_orders"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.add_store_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#add_store_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the single store order item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_store_order_item(korona_account_id, store_order_id, product_id, opts = {})
      delete_store_order_item_with_http_info(korona_account_id, store_order_id, product_id, opts)
      nil
    end

    # deletes the single store order item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_store_order_item_with_http_info(korona_account_id, store_order_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.delete_store_order_item ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.delete_store_order_item"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.delete_store_order_item"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling StoreOrdersApi.delete_store_order_item"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items/{productId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s)).sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.delete_store_order_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#delete_store_order_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns a single store order
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [StoreOrder]
    def get_store_order(korona_account_id, store_order_id, opts = {})
      data, _status_code, _headers = get_store_order_with_http_info(korona_account_id, store_order_id, opts)
      data
    end

    # returns a single store order
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreOrder, Integer, Hash)>] StoreOrder data, response status code and response headers
    def get_store_order_with_http_info(korona_account_id, store_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.get_store_order ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.get_store_order"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.get_store_order"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StoreOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.get_store_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#get_store_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single store order item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [StoreOrderItem]
    def get_store_order_item(korona_account_id, store_order_id, product_id, opts = {})
      data, _status_code, _headers = get_store_order_item_with_http_info(korona_account_id, store_order_id, product_id, opts)
      data
    end

    # returns the single store order item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(StoreOrderItem, Integer, Hash)>] StoreOrderItem data, response status code and response headers
    def get_store_order_item_with_http_info(korona_account_id, store_order_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.get_store_order_item ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.get_store_order_item"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.get_store_order_item"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling StoreOrdersApi.get_store_order_item"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items/{productId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s)).sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StoreOrderItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.get_store_order_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#get_store_order_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all store order items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @return [ResultListStoreOrderItem]
    def get_store_order_items(korona_account_id, store_order_id, opts = {})
      data, _status_code, _headers = get_store_order_items_with_http_info(korona_account_id, store_order_id, opts)
      data
    end

    # lists all store order items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @return [Array<(ResultListStoreOrderItem, Integer, Hash)>] ResultListStoreOrderItem data, response status code and response headers
    def get_store_order_items_with_http_info(korona_account_id, store_order_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.get_store_order_items ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.get_store_order_items"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.get_store_order_items"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListStoreOrderItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.get_store_order_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#get_store_order_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all store orders
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [Time] :min_create_time min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_create_time max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :target_organizational_unit target organizational unit
    # @option opts [Time] :min_finish_time min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_finish_time max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :min_pick_up_time min (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_pick_up_time max (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :number number of the related object
    # @return [ResultListStoreOrder]
    def get_store_orders(korona_account_id, opts = {})
      data, _status_code, _headers = get_store_orders_with_http_info(korona_account_id, opts)
      data
    end

    # lists all store orders
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [Time] :min_create_time min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_create_time max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :target_organizational_unit target organizational unit
    # @option opts [Time] :min_finish_time min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_finish_time max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :min_pick_up_time min (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_pick_up_time max (inclusive) pick up time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :number number of the related object
    # @return [Array<(ResultListStoreOrder, Integer, Hash)>] ResultListStoreOrder data, response status code and response headers
    def get_store_orders_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.get_store_orders ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.get_store_orders"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'minCreateTime'] = opts[:'min_create_time'] if !opts[:'min_create_time'].nil?
      query_params[:'maxCreateTime'] = opts[:'max_create_time'] if !opts[:'max_create_time'].nil?
      query_params[:'targetOrganizationalUnit'] = opts[:'target_organizational_unit'] if !opts[:'target_organizational_unit'].nil?
      query_params[:'minFinishTime'] = opts[:'min_finish_time'] if !opts[:'min_finish_time'].nil?
      query_params[:'maxFinishTime'] = opts[:'max_finish_time'] if !opts[:'max_finish_time'].nil?
      query_params[:'minPickUpTime'] = opts[:'min_pick_up_time'] if !opts[:'min_pick_up_time'].nil?
      query_params[:'maxPickUpTime'] = opts[:'max_pick_up_time'] if !opts[:'max_pick_up_time'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListStoreOrder'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.get_store_orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#get_store_orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # orders and finalizes the store order
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param order_action [String] type of order finalization. according to items speficiations (either each item must have a source, or those without are ignored and deleted) or regardless of items specifications (joint supplier or warehouse)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :warehouse warehouse (&#x3D; organizational unit having warehouse flag)
    # @option opts [String] :supplier supplier
    # @return [nil]
    def order_store_order(korona_account_id, store_order_id, order_action, opts = {})
      order_store_order_with_http_info(korona_account_id, store_order_id, order_action, opts)
      nil
    end

    # orders and finalizes the store order
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param order_action [String] type of order finalization. according to items speficiations (either each item must have a source, or those without are ignored and deleted) or regardless of items specifications (joint supplier or warehouse)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :warehouse warehouse (&#x3D; organizational unit having warehouse flag)
    # @option opts [String] :supplier supplier
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def order_store_order_with_http_info(korona_account_id, store_order_id, order_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.order_store_order ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.order_store_order"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.order_store_order"
      end
      # verify the required parameter 'order_action' is set
      if @api_client.config.client_side_validation && order_action.nil?
        fail ArgumentError, "Missing the required parameter 'order_action' when calling StoreOrdersApi.order_store_order"
      end
      # verify enum value
      allowable_values = ["ACCORDING_TO_SPECIFICATIONS", "ACCORDING_TO_SPECIFICATIONS_IGNORE_AND_DELETE", "REGARDLESS_OF_SPECIFICATIONS_AT_JOINT_FROM_SUPPLIER", "REGARDLESS_OF_SPECIFICATIONS_AT_JOINT_FROM_WAREHOUSE"]
      if @api_client.config.client_side_validation && !allowable_values.include?(order_action)
        fail ArgumentError, "invalid value for \"order_action\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/order'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orderAction'] = order_action
      query_params[:'warehouse'] = opts[:'warehouse'] if !opts[:'warehouse'].nil?
      query_params[:'supplier'] = opts[:'supplier'] if !opts[:'supplier'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.order_store_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#order_store_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single store order
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [StoreOrder] data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_store_order(korona_account_id, store_order_id, body, opts = {})
      update_store_order_with_http_info(korona_account_id, store_order_id, body, opts)
      nil
    end

    # updates the single store order
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [StoreOrder] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_store_order_with_http_info(korona_account_id, store_order_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.update_store_order ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.update_store_order"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.update_store_order"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StoreOrdersApi.update_store_order"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.update_store_order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#update_store_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single store order item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [StoreOrderItem] data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_store_order_item(korona_account_id, store_order_id, product_id, body, opts = {})
      update_store_order_item_with_http_info(korona_account_id, store_order_id, product_id, body, opts)
      nil
    end

    # updates the single store order item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [StoreOrderItem] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_store_order_item_with_http_info(korona_account_id, store_order_id, product_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.update_store_order_item ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.update_store_order_item"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.update_store_order_item"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling StoreOrdersApi.update_store_order_item"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StoreOrdersApi.update_store_order_item"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items/{productId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s)).sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.update_store_order_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#update_store_order_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates store order items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<StoreOrderItem>] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_store_order_items(korona_account_id, store_order_id, body, opts = {})
      data, _status_code, _headers = update_store_order_items_with_http_info(korona_account_id, store_order_id, body, opts)
      data
    end

    # updates store order items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param store_order_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<StoreOrderItem>] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_store_order_items_with_http_info(korona_account_id, store_order_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StoreOrdersApi.update_store_order_items ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling StoreOrdersApi.update_store_order_items"
      end
      # verify the required parameter 'store_order_id' is set
      if @api_client.config.client_side_validation && store_order_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_order_id' when calling StoreOrdersApi.update_store_order_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling StoreOrdersApi.update_store_order_items"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/storeOrders/{storeOrderId}/items'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'storeOrderId' + '}', CGI.escape(store_order_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StoreOrdersApi.update_store_order_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StoreOrdersApi#update_store_order_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
