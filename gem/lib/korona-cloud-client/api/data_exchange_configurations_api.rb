=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 3.2-SNAPSHOT
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module KoronaCloudClient
  class DataExchangeConfigurationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # returns the single data exchange configuration
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param data_exchange_configuration_type [String] data exchange configuration type
    # @param [Hash] opts the optional parameters
    # @return [DataExchangeConfiguration]
    def get_data_exchange_configuration(korona_account_id, data_exchange_configuration_type, opts = {})
      data, _status_code, _headers = get_data_exchange_configuration_with_http_info(korona_account_id, data_exchange_configuration_type, opts)
      data
    end

    # returns the single data exchange configuration
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param data_exchange_configuration_type [String] data exchange configuration type
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataExchangeConfiguration, Integer, Hash)>] DataExchangeConfiguration data, response status code and response headers
    def get_data_exchange_configuration_with_http_info(korona_account_id, data_exchange_configuration_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataExchangeConfigurationsApi.get_data_exchange_configuration ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling DataExchangeConfigurationsApi.get_data_exchange_configuration"
      end
      # verify the required parameter 'data_exchange_configuration_type' is set
      if @api_client.config.client_side_validation && data_exchange_configuration_type.nil?
        fail ArgumentError, "Missing the required parameter 'data_exchange_configuration_type' when calling DataExchangeConfigurationsApi.get_data_exchange_configuration"
      end
      # verify enum value
      allowable_values = ["KORONA_ENTRY"]
      if @api_client.config.client_side_validation && !allowable_values.include?(data_exchange_configuration_type)
        fail ArgumentError, "invalid value for \"data_exchange_configuration_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/dataExchangeConfigurations/{dataExchangeConfigurationType}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'dataExchangeConfigurationType' + '}', CGI.escape(data_exchange_configuration_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DataExchangeConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DataExchangeConfigurationsApi.get_data_exchange_configuration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataExchangeConfigurationsApi#get_data_exchange_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all data exchange configurations
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @return [ResultListDataExchangeConfiguration]
    def get_data_exchange_configurations(korona_account_id, opts = {})
      data, _status_code, _headers = get_data_exchange_configurations_with_http_info(korona_account_id, opts)
      data
    end

    # lists all data exchange configurations
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResultListDataExchangeConfiguration, Integer, Hash)>] ResultListDataExchangeConfiguration data, response status code and response headers
    def get_data_exchange_configurations_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataExchangeConfigurationsApi.get_data_exchange_configurations ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling DataExchangeConfigurationsApi.get_data_exchange_configurations"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/dataExchangeConfigurations'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListDataExchangeConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DataExchangeConfigurationsApi.get_data_exchange_configurations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataExchangeConfigurationsApi#get_data_exchange_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
