=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.17.57
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'cgi'

module KoronaCloudClient
  class TicketingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # adds a batch of new entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<EntryGate>] array of new entry gates
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<AddOrUpdateResult>]
    def add_entry_gates(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_entry_gates_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds a batch of new entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<EntryGate>] array of new entry gates
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_entry_gates_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.add_entry_gates ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.add_entry_gates"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.add_entry_gates"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/entryGates'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.add_entry_gates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#add_entry_gates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds a batch of new events
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Event>] an array of new events
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<AddOrUpdateResult>]
    def add_events(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_events_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds a batch of new events
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Event>] an array of new events
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_events_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.add_events ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.add_events"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.add_events"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/events'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.add_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#add_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates/adds attendances
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Attendance>] an array of attendances
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_or_update_attendances(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_or_update_attendances_with_http_info(korona_account_id, body, opts)
      data
    end

    # updates/adds attendances
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Attendance>] an array of attendances
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_or_update_attendances_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.add_or_update_attendances ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.add_or_update_attendances"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.add_or_update_attendances"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/attendances'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.add_or_update_attendances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#add_or_update_attendances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds a batch of new ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<TicketDefinition>] array of new ticket definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<AddOrUpdateResult>]
    def add_ticket_definitions(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_ticket_definitions_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds a batch of new ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<TicketDefinition>] array of new ticket definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_ticket_definitions_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.add_ticket_definitions ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.add_ticket_definitions"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.add_ticket_definitions"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketDefinitions'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.add_ticket_definitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#add_ticket_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # cancel the attendance
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param attendance_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_attendance(korona_account_id, attendance_id, opts = {})
      cancel_attendance_with_http_info(korona_account_id, attendance_id, opts)
      nil
    end

    # cancel the attendance
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param attendance_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def cancel_attendance_with_http_info(korona_account_id, attendance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.cancel_attendance ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.cancel_attendance"
      end
      # verify the required parameter 'attendance_id' is set
      if @api_client.config.client_side_validation && attendance_id.nil?
        fail ArgumentError, "Missing the required parameter 'attendance_id' when calling TicketingApi.cancel_attendance"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/attendances/{attendanceId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'attendanceId' + '}', CGI.escape(attendance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.cancel_attendance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#cancel_attendance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes a batch of entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<EntryGate>] array of existing entry gates (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def delete_entry_gates(korona_account_id, body, opts = {})
      data, _status_code, _headers = delete_entry_gates_with_http_info(korona_account_id, body, opts)
      data
    end

    # deletes a batch of entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<EntryGate>] array of existing entry gates (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def delete_entry_gates_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.delete_entry_gates ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.delete_entry_gates"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.delete_entry_gates"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/entryGates'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.delete_entry_gates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#delete_entry_gates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the single event
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param event_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_event(korona_account_id, event_id, opts = {})
      delete_event_with_http_info(korona_account_id, event_id, opts)
      nil
    end

    # deletes the single event
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param event_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_event_with_http_info(korona_account_id, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.delete_event ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.delete_event"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling TicketingApi.delete_event"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/events/{eventId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.delete_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#delete_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the single ticket definition
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_definition_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_ticket_definition(korona_account_id, ticket_definition_id, opts = {})
      delete_ticket_definition_with_http_info(korona_account_id, ticket_definition_id, opts)
      nil
    end

    # deletes the single ticket definition
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_definition_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_ticket_definition_with_http_info(korona_account_id, ticket_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.delete_ticket_definition ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.delete_ticket_definition"
      end
      # verify the required parameter 'ticket_definition_id' is set
      if @api_client.config.client_side_validation && ticket_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_definition_id' when calling TicketingApi.delete_ticket_definition"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'ticketDefinitionId' + '}', CGI.escape(ticket_definition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.delete_ticket_definition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#delete_ticket_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes a batch of ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<TicketDefinition>] array of existing ticket definitions (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def delete_ticket_definitions(korona_account_id, body, opts = {})
      data, _status_code, _headers = delete_ticket_definitions_with_http_info(korona_account_id, body, opts)
      data
    end

    # deletes a batch of ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<TicketDefinition>] array of existing ticket definitions (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def delete_ticket_definitions_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.delete_ticket_definitions ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.delete_ticket_definitions"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.delete_ticket_definitions"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketDefinitions'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.delete_ticket_definitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#delete_ticket_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single attendance
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param attendance_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Attendance]
    def get_attendance(korona_account_id, attendance_id, opts = {})
      data, _status_code, _headers = get_attendance_with_http_info(korona_account_id, attendance_id, opts)
      data
    end

    # returns the single attendance
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param attendance_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Attendance, Integer, Hash)>] Attendance data, response status code and response headers
    def get_attendance_with_http_info(korona_account_id, attendance_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_attendance ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_attendance"
      end
      # verify the required parameter 'attendance_id' is set
      if @api_client.config.client_side_validation && attendance_id.nil?
        fail ArgumentError, "Missing the required parameter 'attendance_id' when calling TicketingApi.get_attendance"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/attendances/{attendanceId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'attendanceId' + '}', CGI.escape(attendance_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Attendance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_attendance",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_attendance\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all attendances
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [ResultListAttendance]
    def get_attendances(korona_account_id, opts = {})
      data, _status_code, _headers = get_attendances_with_http_info(korona_account_id, opts)
      data
    end

    # lists all attendances
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [Array<(ResultListAttendance, Integer, Hash)>] ResultListAttendance data, response status code and response headers
    def get_attendances_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_attendances ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_attendances"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/attendances'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListAttendance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_attendances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_attendances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single entry gate
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param entry_gate_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [EntryGate]
    def get_entry_gate(korona_account_id, entry_gate_id, opts = {})
      data, _status_code, _headers = get_entry_gate_with_http_info(korona_account_id, entry_gate_id, opts)
      data
    end

    # returns the single entry gate
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param entry_gate_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntryGate, Integer, Hash)>] EntryGate data, response status code and response headers
    def get_entry_gate_with_http_info(korona_account_id, entry_gate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_entry_gate ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_entry_gate"
      end
      # verify the required parameter 'entry_gate_id' is set
      if @api_client.config.client_side_validation && entry_gate_id.nil?
        fail ArgumentError, "Missing the required parameter 'entry_gate_id' when calling TicketingApi.get_entry_gate"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/entryGates/{entryGateId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'entryGateId' + '}', CGI.escape(entry_gate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntryGate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_entry_gate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_entry_gate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [String] :number number of the related object
    # @return [ResultListEntryGate]
    def get_entry_gates(korona_account_id, opts = {})
      data, _status_code, _headers = get_entry_gates_with_http_info(korona_account_id, opts)
      data
    end

    # lists all entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [String] :number number of the related object
    # @return [Array<(ResultListEntryGate, Integer, Hash)>] ResultListEntryGate data, response status code and response headers
    def get_entry_gates_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_entry_gates ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_entry_gates"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/entryGates'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListEntryGate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_entry_gates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_entry_gates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single event
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param event_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Event]
    def get_event(korona_account_id, event_id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(korona_account_id, event_id, opts)
      data
    end

    # returns the single event
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param event_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Event, Integer, Hash)>] Event data, response status code and response headers
    def get_event_with_http_info(korona_account_id, event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_event ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_event"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling TicketingApi.get_event"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/events/{eventId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Event'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all events
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [Time] :min_start_time min (inclusive) start time of the event (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_start_time max (inclusive) start time of the event (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @return [ResultListEvent]
    def get_events(korona_account_id, opts = {})
      data, _status_code, _headers = get_events_with_http_info(korona_account_id, opts)
      data
    end

    # lists all events
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [Time] :min_start_time min (inclusive) start time of the event (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_start_time max (inclusive) start time of the event (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @return [Array<(ResultListEvent, Integer, Hash)>] ResultListEvent data, response status code and response headers
    def get_events_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_events ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_events"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/events'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'minStartTime'] = opts[:'min_start_time'] if !opts[:'min_start_time'].nil?
      query_params[:'maxStartTime'] = opts[:'max_start_time'] if !opts[:'max_start_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListEvent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single ticket definition
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_definition_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [TicketDefinition]
    def get_ticket_definition(korona_account_id, ticket_definition_id, opts = {})
      data, _status_code, _headers = get_ticket_definition_with_http_info(korona_account_id, ticket_definition_id, opts)
      data
    end

    # returns the single ticket definition
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_definition_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(TicketDefinition, Integer, Hash)>] TicketDefinition data, response status code and response headers
    def get_ticket_definition_with_http_info(korona_account_id, ticket_definition_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_ticket_definition ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_ticket_definition"
      end
      # verify the required parameter 'ticket_definition_id' is set
      if @api_client.config.client_side_validation && ticket_definition_id.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_definition_id' when calling TicketingApi.get_ticket_definition"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketDefinitions/{ticketDefinitionId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'ticketDefinitionId' + '}', CGI.escape(ticket_definition_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TicketDefinition'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_ticket_definition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_ticket_definition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [ResultListTicketDefinition]
    def get_ticket_definitions(korona_account_id, opts = {})
      data, _status_code, _headers = get_ticket_definitions_with_http_info(korona_account_id, opts)
      data
    end

    # lists all ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @return [Array<(ResultListTicketDefinition, Integer, Hash)>] ResultListTicketDefinition data, response status code and response headers
    def get_ticket_definitions_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_ticket_definitions ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_ticket_definitions"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketDefinitions'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListTicketDefinition'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_ticket_definitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_ticket_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all tickets
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param page [Integer] number of the page to fetch
    # @param size [Integer] amount of objects to return per page
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ticket_number ticket number
    # @option opts [String] :customer_number customer number
    # @option opts [Time] :creation_date_from creation date from
    # @option opts [Time] :creation_date_to creation date to
    # @option opts [Boolean] :locked is ticket locked
    # @option opts [String] :owner_last_name last name of owner
    # @option opts [String] :owner_first_name first name of owner
    # @option opts [Boolean] :load_owner_image set true if you want to load the owner&#39;s image
    # @return [ResultListTicket]
    def get_tickets(korona_account_id, page, size, opts = {})
      data, _status_code, _headers = get_tickets_with_http_info(korona_account_id, page, size, opts)
      data
    end

    # lists all tickets
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param page [Integer] number of the page to fetch
    # @param size [Integer] amount of objects to return per page
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ticket_number ticket number
    # @option opts [String] :customer_number customer number
    # @option opts [Time] :creation_date_from creation date from
    # @option opts [Time] :creation_date_to creation date to
    # @option opts [Boolean] :locked is ticket locked
    # @option opts [String] :owner_last_name last name of owner
    # @option opts [String] :owner_first_name first name of owner
    # @option opts [Boolean] :load_owner_image set true if you want to load the owner&#39;s image
    # @return [Array<(ResultListTicket, Integer, Hash)>] ResultListTicket data, response status code and response headers
    def get_tickets_with_http_info(korona_account_id, page, size, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.get_tickets ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.get_tickets"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling TicketingApi.get_tickets"
      end
      # verify the required parameter 'size' is set
      if @api_client.config.client_side_validation && size.nil?
        fail ArgumentError, "Missing the required parameter 'size' when calling TicketingApi.get_tickets"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/tickets'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = page
      query_params[:'size'] = size
      query_params[:'ticketNumber'] = opts[:'ticket_number'] if !opts[:'ticket_number'].nil?
      query_params[:'customerNumber'] = opts[:'customer_number'] if !opts[:'customer_number'].nil?
      query_params[:'creationDateFrom'] = opts[:'creation_date_from'] if !opts[:'creation_date_from'].nil?
      query_params[:'creationDateTo'] = opts[:'creation_date_to'] if !opts[:'creation_date_to'].nil?
      query_params[:'locked'] = opts[:'locked'] if !opts[:'locked'].nil?
      query_params[:'ownerLastName'] = opts[:'owner_last_name'] if !opts[:'owner_last_name'].nil?
      query_params[:'ownerFirstName'] = opts[:'owner_first_name'] if !opts[:'owner_first_name'].nil?
      query_params[:'loadOwnerImage'] = opts[:'load_owner_image'] if !opts[:'load_owner_image'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListTicket'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.get_tickets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#get_tickets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # locks the single ticket
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_number [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def lock_ticket(korona_account_id, ticket_number, opts = {})
      lock_ticket_with_http_info(korona_account_id, ticket_number, opts)
      nil
    end

    # locks the single ticket
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_number [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lock_ticket_with_http_info(korona_account_id, ticket_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.lock_ticket ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.lock_ticket"
      end
      # verify the required parameter 'ticket_number' is set
      if @api_client.config.client_side_validation && ticket_number.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_number' when calling TicketingApi.lock_ticket"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/tickets/{ticketNumber}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'ticketNumber' + '}', CGI.escape(ticket_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.lock_ticket",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#lock_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # unlocks the single ticket
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_number [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unlock_ticket(korona_account_id, ticket_number, opts = {})
      unlock_ticket_with_http_info(korona_account_id, ticket_number, opts)
      nil
    end

    # unlocks the single ticket
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_number [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unlock_ticket_with_http_info(korona_account_id, ticket_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.unlock_ticket ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.unlock_ticket"
      end
      # verify the required parameter 'ticket_number' is set
      if @api_client.config.client_side_validation && ticket_number.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_number' when calling TicketingApi.unlock_ticket"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/tickets/{ticketNumber}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'ticketNumber' + '}', CGI.escape(ticket_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.unlock_ticket",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#unlock_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates a batch of entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<EntryGate>] array of existing entry gates (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_entry_gates(korona_account_id, body, opts = {})
      data, _status_code, _headers = update_entry_gates_with_http_info(korona_account_id, body, opts)
      data
    end

    # updates a batch of entry gates
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<EntryGate>] array of existing entry gates (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_entry_gates_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.update_entry_gates ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.update_entry_gates"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.update_entry_gates"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/entryGates'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.update_entry_gates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#update_entry_gates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single event
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param event_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Event] the properties to update of the event
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_event(korona_account_id, event_id, body, opts = {})
      update_event_with_http_info(korona_account_id, event_id, body, opts)
      nil
    end

    # updates the single event
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param event_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Event] the properties to update of the event
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_event_with_http_info(korona_account_id, event_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.update_event ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.update_event"
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling TicketingApi.update_event"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.update_event"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/events/{eventId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'eventId' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.update_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#update_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates a batch of events
    # [number] must be set in the objects, otherwise the object cannot be updated
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Event>] an array of existing events
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_events(korona_account_id, body, opts = {})
      data, _status_code, _headers = update_events_with_http_info(korona_account_id, body, opts)
      data
    end

    # updates a batch of events
    # [number] must be set in the objects, otherwise the object cannot be updated
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Event>] an array of existing events
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_events_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.update_events ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.update_events"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.update_events"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/events'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.update_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#update_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single ticket
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_number [String] old ticket number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :new_ticket_number new ticket number
    # @option opts [String] :first_name ticket owner&#39;s first name
    # @option opts [String] :last_name ticket owner&#39;s last name
    # @return [nil]
    def update_ticket(korona_account_id, ticket_number, opts = {})
      update_ticket_with_http_info(korona_account_id, ticket_number, opts)
      nil
    end

    # updates the single ticket
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param ticket_number [String] old ticket number
    # @param [Hash] opts the optional parameters
    # @option opts [String] :new_ticket_number new ticket number
    # @option opts [String] :first_name ticket owner&#39;s first name
    # @option opts [String] :last_name ticket owner&#39;s last name
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_ticket_with_http_info(korona_account_id, ticket_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.update_ticket ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.update_ticket"
      end
      # verify the required parameter 'ticket_number' is set
      if @api_client.config.client_side_validation && ticket_number.nil?
        fail ArgumentError, "Missing the required parameter 'ticket_number' when calling TicketingApi.update_ticket"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/tickets/{ticketNumber}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'ticketNumber' + '}', CGI.escape(ticket_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'newTicketNumber'] = opts[:'new_ticket_number'] if !opts[:'new_ticket_number'].nil?
      query_params[:'firstName'] = opts[:'first_name'] if !opts[:'first_name'].nil?
      query_params[:'lastName'] = opts[:'last_name'] if !opts[:'last_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.update_ticket",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#update_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates a batch of ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<TicketDefinition>] array of existing ticket definitions (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_ticket_definitions(korona_account_id, body, opts = {})
      data, _status_code, _headers = update_ticket_definitions_with_http_info(korona_account_id, body, opts)
      data
    end

    # updates a batch of ticket definitions
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<TicketDefinition>] array of existing ticket definitions (id or number required)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_ticket_definitions_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketingApi.update_ticket_definitions ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketingApi.update_ticket_definitions"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketingApi.update_ticket_definitions"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketDefinitions'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"TicketingApi.update_ticket_definitions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketingApi#update_ticket_definitions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
