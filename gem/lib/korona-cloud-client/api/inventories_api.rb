=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.17.26
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.2.1

=end

require 'cgi'

module KoronaCloudClient
  class InventoriesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # adds a batch of new inventories
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Inventory>] an array of new inventories
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_inventories(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_inventories_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds a batch of new inventories
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Inventory>] an array of new inventories
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_inventories_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.add_inventories ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.add_inventories"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesApi.add_inventories"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.add_inventories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#add_inventories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds inventory list items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<InventoryListItem>] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def add_inventory_list_items(korona_account_id, inventory_id, inventory_list_id, body, opts = {})
      data, _status_code, _headers = add_inventory_list_items_with_http_info(korona_account_id, inventory_id, inventory_list_id, body, opts)
      data
    end

    # adds inventory list items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<InventoryListItem>] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_inventory_list_items_with_http_info(korona_account_id, inventory_id, inventory_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.add_inventory_list_items ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.add_inventory_list_items"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.add_inventory_list_items"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.add_inventory_list_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesApi.add_inventory_list_items"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.add_inventory_list_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#add_inventory_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # book the single inventory list
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def book_inventory_list(korona_account_id, inventory_id, inventory_list_id, opts = {})
      book_inventory_list_with_http_info(korona_account_id, inventory_id, inventory_list_id, opts)
      nil
    end

    # book the single inventory list
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def book_inventory_list_with_http_info(korona_account_id, inventory_id, inventory_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.book_inventory_list ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.book_inventory_list"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.book_inventory_list"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.book_inventory_list"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/book'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.book_inventory_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#book_inventory_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the single inventory (only allowed if hasBookedReceipts=false)
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_inventory(korona_account_id, inventory_id, opts = {})
      delete_inventory_with_http_info(korona_account_id, inventory_id, opts)
      nil
    end

    # deletes the single inventory (only allowed if hasBookedReceipts&#x3D;false)
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inventory_with_http_info(korona_account_id, inventory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.delete_inventory ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.delete_inventory"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.delete_inventory"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.delete_inventory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#delete_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # deletes the single inventory list item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_inventory_list_item(korona_account_id, inventory_id, inventory_list_id, product_id, opts = {})
      delete_inventory_list_item_with_http_info(korona_account_id, inventory_id, inventory_list_id, product_id, opts)
      nil
    end

    # deletes the single inventory list item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inventory_list_item_with_http_info(korona_account_id, inventory_id, inventory_list_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.delete_inventory_list_item ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.delete_inventory_list_item"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.delete_inventory_list_item"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.delete_inventory_list_item"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling InventoriesApi.delete_inventory_list_item"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s)).sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.delete_inventory_list_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#delete_inventory_list_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all inventories
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [String] :number number of the related object
    # @return [ResultListInventory]
    def get_inventories(korona_account_id, opts = {})
      data, _status_code, _headers = get_inventories_with_http_info(korona_account_id, opts)
      data
    end

    # lists all inventories
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [String] :number number of the related object
    # @return [Array<(ResultListInventory, Integer, Hash)>] ResultListInventory data, response status code and response headers
    def get_inventories_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.get_inventories ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.get_inventories"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListInventory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.get_inventories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#get_inventories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single inventory
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Inventory]
    def get_inventory(korona_account_id, inventory_id, opts = {})
      data, _status_code, _headers = get_inventory_with_http_info(korona_account_id, inventory_id, opts)
      data
    end

    # returns the single inventory
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Inventory, Integer, Hash)>] Inventory data, response status code and response headers
    def get_inventory_with_http_info(korona_account_id, inventory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.get_inventory ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.get_inventory"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.get_inventory"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Inventory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.get_inventory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#get_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single inventory list
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [InventoryList]
    def get_inventory_list(korona_account_id, inventory_id, inventory_list_id, opts = {})
      data, _status_code, _headers = get_inventory_list_with_http_info(korona_account_id, inventory_id, inventory_list_id, opts)
      data
    end

    # returns the single inventory list
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryList, Integer, Hash)>] InventoryList data, response status code and response headers
    def get_inventory_list_with_http_info(korona_account_id, inventory_id, inventory_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.get_inventory_list ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.get_inventory_list"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.get_inventory_list"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.get_inventory_list"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.get_inventory_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#get_inventory_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single inventory list item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [InventoryListItem]
    def get_inventory_list_item(korona_account_id, inventory_id, inventory_list_id, product_id, opts = {})
      data, _status_code, _headers = get_inventory_list_item_with_http_info(korona_account_id, inventory_id, inventory_list_id, product_id, opts)
      data
    end

    # returns the single inventory list item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryListItem, Integer, Hash)>] InventoryListItem data, response status code and response headers
    def get_inventory_list_item_with_http_info(korona_account_id, inventory_id, inventory_list_id, product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.get_inventory_list_item ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.get_inventory_list_item"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.get_inventory_list_item"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.get_inventory_list_item"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling InventoriesApi.get_inventory_list_item"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s)).sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.get_inventory_list_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#get_inventory_list_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all inventory list items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [ResultListInventoryListItem]
    def get_inventory_list_items(korona_account_id, inventory_id, inventory_list_id, opts = {})
      data, _status_code, _headers = get_inventory_list_items_with_http_info(korona_account_id, inventory_id, inventory_list_id, opts)
      data
    end

    # lists all inventory list items
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [Array<(ResultListInventoryListItem, Integer, Hash)>] ResultListInventoryListItem data, response status code and response headers
    def get_inventory_list_items_with_http_info(korona_account_id, inventory_id, inventory_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.get_inventory_list_items ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.get_inventory_list_items"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.get_inventory_list_items"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.get_inventory_list_items"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListInventoryListItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.get_inventory_list_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#get_inventory_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all inventory lists
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [Time] :min_create_time min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_create_time max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :booking_status booking status (possible values: BOOKED, IN_PROGRESS)
    # @option opts [String] :number number of the related object
    # @return [ResultListInventoryList]
    def get_inventory_lists(korona_account_id, inventory_id, opts = {})
      data, _status_code, _headers = get_inventory_lists_with_http_info(korona_account_id, inventory_id, opts)
      data
    end

    # lists all inventory lists
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [Time] :min_create_time min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_create_time max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :booking_status booking status (possible values: BOOKED, IN_PROGRESS)
    # @option opts [String] :number number of the related object
    # @return [Array<(ResultListInventoryList, Integer, Hash)>] ResultListInventoryList data, response status code and response headers
    def get_inventory_lists_with_http_info(korona_account_id, inventory_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.get_inventory_lists ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.get_inventory_lists"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.get_inventory_lists"
      end
      allowable_values = ["BOOKED", "IN_PROGRESS"]
      if @api_client.config.client_side_validation && opts[:'booking_status'] && !allowable_values.include?(opts[:'booking_status'])
        fail ArgumentError, "invalid value for \"booking_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'minCreateTime'] = opts[:'min_create_time'] if !opts[:'min_create_time'].nil?
      query_params[:'maxCreateTime'] = opts[:'max_create_time'] if !opts[:'max_create_time'].nil?
      query_params[:'minBookingTime'] = opts[:'min_booking_time'] if !opts[:'min_booking_time'].nil?
      query_params[:'maxBookingTime'] = opts[:'max_booking_time'] if !opts[:'max_booking_time'].nil?
      query_params[:'bookingStatus'] = opts[:'booking_status'] if !opts[:'booking_status'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListInventoryList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.get_inventory_lists",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#get_inventory_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single inventory
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Inventory] the properties to update of the inventory
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory(korona_account_id, inventory_id, body, opts = {})
      update_inventory_with_http_info(korona_account_id, inventory_id, body, opts)
      nil
    end

    # updates the single inventory
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Inventory] the properties to update of the inventory
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_inventory_with_http_info(korona_account_id, inventory_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.update_inventory ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.update_inventory"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.update_inventory"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesApi.update_inventory"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.update_inventory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#update_inventory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single inventory list
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [InventoryList] data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory_list(korona_account_id, inventory_id, inventory_list_id, body, opts = {})
      update_inventory_list_with_http_info(korona_account_id, inventory_id, inventory_list_id, body, opts)
      nil
    end

    # updates the single inventory list
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [InventoryList] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_inventory_list_with_http_info(korona_account_id, inventory_id, inventory_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.update_inventory_list ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.update_inventory_list"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.update_inventory_list"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.update_inventory_list"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesApi.update_inventory_list"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.update_inventory_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#update_inventory_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the single inventory list item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [InventoryListItem] data to update
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_inventory_list_item(korona_account_id, inventory_id, inventory_list_id, product_id, body, opts = {})
      update_inventory_list_item_with_http_info(korona_account_id, inventory_id, inventory_list_id, product_id, body, opts)
      nil
    end

    # updates the single inventory list item
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param product_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [InventoryListItem] data to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_inventory_list_item_with_http_info(korona_account_id, inventory_id, inventory_list_id, product_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.update_inventory_list_item ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.update_inventory_list_item"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.update_inventory_list_item"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.update_inventory_list_item"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        fail ArgumentError, "Missing the required parameter 'product_id' when calling InventoriesApi.update_inventory_list_item"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesApi.update_inventory_list_item"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items/{productId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s)).sub('{' + 'productId' + '}', CGI.escape(product_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.update_inventory_list_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#update_inventory_list_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates inventory list items (property [product] required))
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<InventoryListItem>] an array of inventory list items to update
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_inventory_list_items(korona_account_id, inventory_id, inventory_list_id, body, opts = {})
      data, _status_code, _headers = update_inventory_list_items_with_http_info(korona_account_id, inventory_id, inventory_list_id, body, opts)
      data
    end

    # updates inventory list items (property [product] required))
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param inventory_id [String] id of the related object (important: id should match the uuid-format)
    # @param inventory_list_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Array<InventoryListItem>] an array of inventory list items to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_inventory_list_items_with_http_info(korona_account_id, inventory_id, inventory_list_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoriesApi.update_inventory_list_items ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling InventoriesApi.update_inventory_list_items"
      end
      # verify the required parameter 'inventory_id' is set
      if @api_client.config.client_side_validation && inventory_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_id' when calling InventoriesApi.update_inventory_list_items"
      end
      # verify the required parameter 'inventory_list_id' is set
      if @api_client.config.client_side_validation && inventory_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_list_id' when calling InventoriesApi.update_inventory_list_items"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoriesApi.update_inventory_list_items"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/inventories/{inventoryId}/inventoryLists/{inventoryListId}/items'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'inventoryId' + '}', CGI.escape(inventory_id.to_s)).sub('{' + 'inventoryListId' + '}', CGI.escape(inventory_list_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"InventoriesApi.update_inventory_list_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoriesApi#update_inventory_list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
