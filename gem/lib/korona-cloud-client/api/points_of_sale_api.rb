=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.19.20
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0

=end

require 'cgi'

module KoronaCloudClient
  class PointsOfSaleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # adds a batch of point of sale-related end-of-day-statements
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param coupling_id [String] the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EndOfDayStatement>] :body the end-of-day-statements to add
    # @return [Array<AddOrUpdateResult>]
    def add_point_of_sale_end_of_day_statements(korona_account_id, point_of_sale_id, coupling_id, opts = {})
      data, _status_code, _headers = add_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id, coupling_id, opts)
      data
    end

    # adds a batch of point of sale-related end-of-day-statements
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param coupling_id [String] the coupling-id of the device
    # @param [Hash] opts the optional parameters
    # @option opts [Array<EndOfDayStatement>] :body the end-of-day-statements to add
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id, coupling_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.add_point_of_sale_end_of_day_statements ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.add_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.add_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'coupling_id' is set
      if @api_client.config.client_side_validation && coupling_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupling_id' when calling PointsOfSaleApi.add_point_of_sale_end_of_day_statements"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/endOfDayStatements'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = coupling_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.add_point_of_sale_end_of_day_statements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#add_point_of_sale_end_of_day_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds a batch of point of sale-related receipts
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param coupling_id [String] the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_receipt_number_prefix prevents setting a prefix at the receipt number
    # @option opts [Array<Receipt>] :body the receipts to add
    # @return [Array<AddOrUpdateResult>]
    def add_point_of_sale_receipts(korona_account_id, point_of_sale_id, coupling_id, opts = {})
      data, _status_code, _headers = add_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id, coupling_id, opts)
      data
    end

    # adds a batch of point of sale-related receipts
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param coupling_id [String] the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :disable_receipt_number_prefix prevents setting a prefix at the receipt number
    # @option opts [Array<Receipt>] :body the receipts to add
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id, coupling_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.add_point_of_sale_receipts ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.add_point_of_sale_receipts"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.add_point_of_sale_receipts"
      end
      # verify the required parameter 'coupling_id' is set
      if @api_client.config.client_side_validation && coupling_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupling_id' when calling PointsOfSaleApi.add_point_of_sale_receipts"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = coupling_id
      query_params[:'disableReceiptNumberPrefix'] = opts[:'disable_receipt_number_prefix'] if !opts[:'disable_receipt_number_prefix'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.add_point_of_sale_receipts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#add_point_of_sale_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # adds a batch of new points of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Pos>] array of new points of sale
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<AddOrUpdateResult>]
    def add_points_of_sale(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_points_of_sale_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds a batch of new points of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Pos>] array of new points of sale
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :upsert when set to true, updates the object instead of generating a already-exists-error
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def add_points_of_sale_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.add_points_of_sale ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.add_points_of_sale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PointsOfSaleApi.add_points_of_sale"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.add_points_of_sale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#add_points_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single point of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] the number of the point of sale
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @return [Pos]
    def get_point_of_sale(korona_account_id, point_of_sale_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_with_http_info(korona_account_id, point_of_sale_id, opts)
      data
    end

    # returns the single point of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] the number of the point of sale
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @return [Array<(Pos, Integer, Hash)>] Pos data, response status code and response headers
    def get_point_of_sale_with_http_info(korona_account_id, point_of_sale_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.get_point_of_sale ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.get_point_of_sale"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Pos'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.get_point_of_sale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] point of sale
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Integer] :z_count z-count of the pos balance
    # @option opts [String] :cashier cashier id to filter by
    # @return [ResultListPosBalance]
    def get_point_of_sale_balances(korona_account_id, point_of_sale_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_balances_with_http_info(korona_account_id, point_of_sale_id, opts)
      data
    end

    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] point of sale
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Integer] :z_count z-count of the pos balance
    # @option opts [String] :cashier cashier id to filter by
    # @return [Array<(ResultListPosBalance, Integer, Hash)>] ResultListPosBalance data, response status code and response headers
    def get_point_of_sale_balances_with_http_info(korona_account_id, point_of_sale_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.get_point_of_sale_balances ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_balances"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.get_point_of_sale_balances"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/balances'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'zCount'] = opts[:'z_count'] if !opts[:'z_count'].nil?
      query_params[:'cashier'] = opts[:'cashier'] if !opts[:'cashier'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListPosBalance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.get_point_of_sale_balances",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_balances\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all point of sale-related end-of-day-statements
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Time] :min_finish_time min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_finish_time max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Integer] :z_count zCount
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [ResultListEndOfDayStatement]
    def get_point_of_sale_end_of_day_statements(korona_account_id, point_of_sale_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id, opts)
      data
    end

    # lists all point of sale-related end-of-day-statements
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Time] :min_finish_time min (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_finish_time max (inclusive) finish time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Integer] :z_count zCount
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @return [Array<(ResultListEndOfDayStatement, Integer, Hash)>] ResultListEndOfDayStatement data, response status code and response headers
    def get_point_of_sale_end_of_day_statements_with_http_info(korona_account_id, point_of_sale_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.get_point_of_sale_end_of_day_statements ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_end_of_day_statements"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.get_point_of_sale_end_of_day_statements"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/endOfDayStatements'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'minFinishTime'] = opts[:'min_finish_time'] if !opts[:'min_finish_time'].nil?
      query_params[:'maxFinishTime'] = opts[:'max_finish_time'] if !opts[:'max_finish_time'].nil?
      query_params[:'zCount'] = opts[:'z_count'] if !opts[:'z_count'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListEndOfDayStatement'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.get_point_of_sale_end_of_day_statements",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_end_of_day_statements\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # returns the single point of sale-related receipt
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param receipt_id [String] the id of the receipt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Boolean] :voided_items when set to true, voided items will included in response
    # @return [Receipt]
    def get_point_of_sale_receipt(korona_account_id, point_of_sale_id, receipt_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_receipt_with_http_info(korona_account_id, point_of_sale_id, receipt_id, opts)
      data
    end

    # returns the single point of sale-related receipt
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param receipt_id [String] the id of the receipt
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Boolean] :voided_items when set to true, voided items will included in response
    # @return [Array<(Receipt, Integer, Hash)>] Receipt data, response status code and response headers
    def get_point_of_sale_receipt_with_http_info(korona_account_id, point_of_sale_id, receipt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.get_point_of_sale_receipt ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_receipt"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.get_point_of_sale_receipt"
      end
      # verify the required parameter 'receipt_id' is set
      if @api_client.config.client_side_validation && receipt_id.nil?
        fail ArgumentError, "Missing the required parameter 'receipt_id' when calling PointsOfSaleApi.get_point_of_sale_receipt"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts/{receiptId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s)).sub('{' + 'receiptId' + '}', CGI.escape(receipt_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?
      query_params[:'voidedItems'] = opts[:'voided_items'] if !opts[:'voided_items'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Receipt'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.get_point_of_sale_receipt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_receipt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all point of sale-related receipts
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Integer] :z_count z-count of the receipt
    # @option opts [Time] :min_create_time min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_create_time max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :number number of the related object
    # @option opts [Time] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Boolean] :voided_items when set to true, voided items will included in response
    # @option opts [String] :order_number order number
    # @return [ResultListReceipt]
    def get_point_of_sale_receipts(korona_account_id, point_of_sale_id, opts = {})
      data, _status_code, _headers = get_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id, opts)
      data
    end

    # lists all point of sale-related receipts
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device. It can be set to check whether your coupling-id is correct or not (works only, if point of sale is external).
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Integer] :z_count z-count of the receipt
    # @option opts [Time] :min_create_time min (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_create_time max (inclusive) create time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [String] :number number of the related object
    # @option opts [Time] :min_booking_time min (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Time] :max_booking_time max (inclusive) booking time of the receipt (ISO 8601; Format: YYYY-MM-DDTHH:MM:SS; timezone optional)
    # @option opts [Boolean] :voided_items when set to true, voided items will included in response
    # @option opts [String] :order_number order number
    # @return [Array<(ResultListReceipt, Integer, Hash)>] ResultListReceipt data, response status code and response headers
    def get_point_of_sale_receipts_with_http_info(korona_account_id, point_of_sale_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.get_point_of_sale_receipts ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_point_of_sale_receipts"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.get_point_of_sale_receipts"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}/receipts'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'zCount'] = opts[:'z_count'] if !opts[:'z_count'].nil?
      query_params[:'minCreateTime'] = opts[:'min_create_time'] if !opts[:'min_create_time'].nil?
      query_params[:'maxCreateTime'] = opts[:'max_create_time'] if !opts[:'max_create_time'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'minBookingTime'] = opts[:'min_booking_time'] if !opts[:'min_booking_time'].nil?
      query_params[:'maxBookingTime'] = opts[:'max_booking_time'] if !opts[:'max_booking_time'].nil?
      query_params[:'voidedItems'] = opts[:'voided_items'] if !opts[:'voided_items'].nil?
      query_params[:'orderNumber'] = opts[:'order_number'] if !opts[:'order_number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListReceipt'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.get_point_of_sale_receipts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_point_of_sale_receipts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # lists all points of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [String] :number number of the related object
    # @option opts [Boolean] :external indicates external/internal devices should be loaded (default: null (load all))
    # @option opts [Boolean] :coupled indicates coupled/not coupled devices should be loaded (default: null (load all))
    # @return [ResultListPos]
    def get_points_of_sale(korona_account_id, opts = {})
      data, _status_code, _headers = get_points_of_sale_with_http_info(korona_account_id, opts)
      data
    end

    # lists all points of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page number of the page to fetch
    # @option opts [Integer] :size amount of objects to return per page
    # @option opts [String] :sort attribute to sort by (multiple separated by comma; max. 5)
    # @option opts [Integer] :revision last revision number, objects with a greater revision than this will be returned
    # @option opts [Boolean] :include_deleted indicates deleted objects should be loaded or not (default: false)
    # @option opts [String] :number number of the related object
    # @option opts [Boolean] :external indicates external/internal devices should be loaded (default: null (load all))
    # @option opts [Boolean] :coupled indicates coupled/not coupled devices should be loaded (default: null (load all))
    # @return [Array<(ResultListPos, Integer, Hash)>] ResultListPos data, response status code and response headers
    def get_points_of_sale_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.get_points_of_sale ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.get_points_of_sale"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'includeDeleted'] = opts[:'include_deleted'] if !opts[:'include_deleted'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'external'] = opts[:'external'] if !opts[:'external'].nil?
      query_params[:'coupled'] = opts[:'coupled'] if !opts[:'coupled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResultListPos'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.get_points_of_sale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#get_points_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates the point of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Pos] the properties to update of the point of sale (&#39;couplingId&#39; only)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device (required if already coupled)
    # @option opts [Boolean] :decouple executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled
    # @return [nil]
    def update_point_of_sale(korona_account_id, point_of_sale_id, body, opts = {})
      update_point_of_sale_with_http_info(korona_account_id, point_of_sale_id, body, opts)
      nil
    end

    # updates the point of sale
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param point_of_sale_id [String] id of the related object (important: id should match the uuid-format)
    # @param body [Pos] the properties to update of the point of sale (&#39;couplingId&#39; only)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :coupling_id the coupling-id of the device (required if already coupled)
    # @option opts [Boolean] :decouple executes uncoupling, if set to true, device will be uncoupled if point of sale is already coupled
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_point_of_sale_with_http_info(korona_account_id, point_of_sale_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.update_point_of_sale ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.update_point_of_sale"
      end
      # verify the required parameter 'point_of_sale_id' is set
      if @api_client.config.client_side_validation && point_of_sale_id.nil?
        fail ArgumentError, "Missing the required parameter 'point_of_sale_id' when calling PointsOfSaleApi.update_point_of_sale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PointsOfSaleApi.update_point_of_sale"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale/{pointOfSaleId}'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s)).sub('{' + 'pointOfSaleId' + '}', CGI.escape(point_of_sale_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'couplingId'] = opts[:'coupling_id'] if !opts[:'coupling_id'].nil?
      query_params[:'decouple'] = opts[:'decouple'] if !opts[:'decouple'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.update_point_of_sale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#update_point_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # updates a batch of points of sale
    # [number] must be set in the objects, otherwise the object cannot be updated
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Pos>] an array of existing points of sale
    # @param [Hash] opts the optional parameters
    # @return [Array<AddOrUpdateResult>]
    def update_points_of_sale(korona_account_id, body, opts = {})
      data, _status_code, _headers = update_points_of_sale_with_http_info(korona_account_id, body, opts)
      data
    end

    # updates a batch of points of sale
    # [number] must be set in the objects, otherwise the object cannot be updated
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [Array<Pos>] an array of existing points of sale
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddOrUpdateResult>, Integer, Hash)>] Array<AddOrUpdateResult> data, response status code and response headers
    def update_points_of_sale_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PointsOfSaleApi.update_points_of_sale ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling PointsOfSaleApi.update_points_of_sale"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PointsOfSaleApi.update_points_of_sale"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/pointsOfSale'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddOrUpdateResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"PointsOfSaleApi.update_points_of_sale",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PointsOfSaleApi#update_points_of_sale\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
