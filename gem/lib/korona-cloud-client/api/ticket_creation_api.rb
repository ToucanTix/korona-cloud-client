=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.13.40
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module KoronaCloudClient
  class TicketCreationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # adds a creation task
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [CreationTask] a single ticket creation task
    # @param [Hash] opts the optional parameters
    # @return [AddOrUpdateResult]
    def add_creation_task(korona_account_id, body, opts = {})
      data, _status_code, _headers = add_creation_task_with_http_info(korona_account_id, body, opts)
      data
    end

    # adds a creation task
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param body [CreationTask] a single ticket creation task
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddOrUpdateResult, Integer, Hash)>] AddOrUpdateResult data, response status code and response headers
    def add_creation_task_with_http_info(korona_account_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketCreationApi.add_creation_task ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketCreationApi.add_creation_task"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TicketCreationApi.add_creation_task"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketCreation'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      # return_type
      return_type = opts[:return_type] || 'AddOrUpdateResult' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketCreationApi#add_creation_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # creation tasks, personalization will always be empty for technical reasons
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :creation_time_from creation time from
    # @option opts [DateTime] :creation_time_to creation time to
    # @option opts [Array<String>] :statuses creation task statuses
    # @return [ResultListCreationTask]
    def get_creation_tasks(korona_account_id, opts = {})
      data, _status_code, _headers = get_creation_tasks_with_http_info(korona_account_id, opts)
      data
    end

    # creation tasks, personalization will always be empty for technical reasons
    # @param korona_account_id [String] account id of the KORONA.cloud account
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :creation_time_from creation time from
    # @option opts [DateTime] :creation_time_to creation time to
    # @option opts [Array<String>] :statuses creation task statuses
    # @return [Array<(ResultListCreationTask, Integer, Hash)>] ResultListCreationTask data, response status code and response headers
    def get_creation_tasks_with_http_info(korona_account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TicketCreationApi.get_creation_tasks ...'
      end
      # verify the required parameter 'korona_account_id' is set
      if @api_client.config.client_side_validation && korona_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'korona_account_id' when calling TicketCreationApi.get_creation_tasks"
      end
      allowable_values = ["PREPARED", "RUNNING", "FINISHED", "FAILED"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{koronaAccountId}/ticketCreation'.sub('{' + 'koronaAccountId' + '}', CGI.escape(korona_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'creationTimeFrom'] = opts[:'creation_time_from'] if !opts[:'creation_time_from'].nil?
      query_params[:'creationTimeTo'] = opts[:'creation_time_to'] if !opts[:'creation_time_to'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ResultListCreationTask' 

      # auth_names
      auth_names = opts[:auth_names] || ['basicAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TicketCreationApi#get_creation_tasks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
