=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 3.2-SNAPSHOT
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module KoronaCloudClient
  class AdditionalReceiptInfoType
    # indicates whether the object is active for use or not
    attr_accessor :active

    # global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
    attr_accessor :id

    # the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
    attr_accessor :revision

    # number of the object, like it is set in backoffice; will be removed when active=false
    attr_accessor :number

    attr_accessor :cashier_input_required

    attr_accessor :customer_groups

    attr_accessor :description

    attr_accessor :min_item_quantity

    attr_accessor :min_total

    attr_accessor :options

    attr_accessor :organizational_units

    attr_accessor :required

    attr_accessor :tag

    attr_accessor :validity

    attr_accessor :points_of_sale

    attr_accessor :points_of_sale_selection_mode

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'id' => :'id',
        :'revision' => :'revision',
        :'number' => :'number',
        :'cashier_input_required' => :'cashierInputRequired',
        :'customer_groups' => :'customerGroups',
        :'description' => :'description',
        :'min_item_quantity' => :'minItemQuantity',
        :'min_total' => :'minTotal',
        :'options' => :'options',
        :'organizational_units' => :'organizationalUnits',
        :'required' => :'required',
        :'tag' => :'tag',
        :'validity' => :'validity',
        :'points_of_sale' => :'pointsOfSale',
        :'points_of_sale_selection_mode' => :'pointsOfSaleSelectionMode'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Boolean',
        :'id' => :'String',
        :'revision' => :'Integer',
        :'number' => :'String',
        :'cashier_input_required' => :'Boolean',
        :'customer_groups' => :'Array<ModelReference>',
        :'description' => :'String',
        :'min_item_quantity' => :'Float',
        :'min_total' => :'Float',
        :'options' => :'Array<String>',
        :'organizational_units' => :'Array<ModelReference>',
        :'required' => :'Boolean',
        :'tag' => :'ModelReference',
        :'validity' => :'Validity',
        :'points_of_sale' => :'Array<ModelReference>',
        :'points_of_sale_selection_mode' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaCloudClient::AdditionalReceiptInfoType` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaCloudClient::AdditionalReceiptInfoType`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'cashier_input_required')
        self.cashier_input_required = attributes[:'cashier_input_required']
      end

      if attributes.key?(:'customer_groups')
        if (value = attributes[:'customer_groups']).is_a?(Array)
          self.customer_groups = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'min_item_quantity')
        self.min_item_quantity = attributes[:'min_item_quantity']
      end

      if attributes.key?(:'min_total')
        self.min_total = attributes[:'min_total']
      end

      if attributes.key?(:'options')
        if (value = attributes[:'options']).is_a?(Array)
          self.options = value
        end
      end

      if attributes.key?(:'organizational_units')
        if (value = attributes[:'organizational_units']).is_a?(Array)
          self.organizational_units = value
        end
      end

      if attributes.key?(:'required')
        self.required = attributes[:'required']
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.key?(:'validity')
        self.validity = attributes[:'validity']
      end

      if attributes.key?(:'points_of_sale')
        if (value = attributes[:'points_of_sale']).is_a?(Array)
          self.points_of_sale = value
        end
      end

      if attributes.key?(:'points_of_sale_selection_mode')
        self.points_of_sale_selection_mode = attributes[:'points_of_sale_selection_mode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      points_of_sale_selection_mode_validator = EnumAttributeValidator.new('String', ["INCLUDE", "EXCLUDE"])
      return false unless points_of_sale_selection_mode_validator.valid?(@points_of_sale_selection_mode)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_groups Value to be assigned
    def customer_groups=(customer_groups)
      if customer_groups.nil?
        fail ArgumentError, 'customer_groups cannot be nil'
      end

      @customer_groups = customer_groups
    end

    # Custom attribute writer method with validation
    # @param [Object] organizational_units Value to be assigned
    def organizational_units=(organizational_units)
      if organizational_units.nil?
        fail ArgumentError, 'organizational_units cannot be nil'
      end

      @organizational_units = organizational_units
    end

    # Custom attribute writer method with validation
    # @param [Object] points_of_sale Value to be assigned
    def points_of_sale=(points_of_sale)
      if points_of_sale.nil?
        fail ArgumentError, 'points_of_sale cannot be nil'
      end

      @points_of_sale = points_of_sale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] points_of_sale_selection_mode Object to be assigned
    def points_of_sale_selection_mode=(points_of_sale_selection_mode)
      validator = EnumAttributeValidator.new('String', ["INCLUDE", "EXCLUDE"])
      unless validator.valid?(points_of_sale_selection_mode)
        fail ArgumentError, "invalid value for \"points_of_sale_selection_mode\", must be one of #{validator.allowable_values}."
      end
      @points_of_sale_selection_mode = points_of_sale_selection_mode
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          id == o.id &&
          revision == o.revision &&
          number == o.number &&
          cashier_input_required == o.cashier_input_required &&
          customer_groups == o.customer_groups &&
          description == o.description &&
          min_item_quantity == o.min_item_quantity &&
          min_total == o.min_total &&
          options == o.options &&
          organizational_units == o.organizational_units &&
          required == o.required &&
          tag == o.tag &&
          validity == o.validity &&
          points_of_sale == o.points_of_sale &&
          points_of_sale_selection_mode == o.points_of_sale_selection_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, id, revision, number, cashier_input_required, customer_groups, description, min_item_quantity, min_total, options, organizational_units, required, tag, validity, points_of_sale, points_of_sale_selection_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KoronaCloudClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
