=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.19.20
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module KoronaCloudClient
  class PaymentMethod
    # indicates whether the object is active for use or not
    attr_accessor :active

    # global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
    attr_accessor :id

    # the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
    attr_accessor :revision

    # number of the object, like it is set in backoffice; will be removed when active=false
    attr_accessor :number

    attr_accessor :allowed_balance_difference

    attr_accessor :currency

    attr_accessor :force_customer_number

    attr_accessor :force_print

    attr_accessor :name

    attr_accessor :payment_service

    attr_accessor :print_copies

    attr_accessor :tag

    attr_accessor :use_cash_drawer

    attr_accessor :revenue_account

    attr_accessor :attach_payment_terminal_data_to_receipt

    attr_accessor :max_payment_sum

    attr_accessor :balance

    attr_accessor :change_due

    attr_accessor :category

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'id' => :'id',
        :'revision' => :'revision',
        :'number' => :'number',
        :'allowed_balance_difference' => :'allowedBalanceDifference',
        :'currency' => :'currency',
        :'force_customer_number' => :'forceCustomerNumber',
        :'force_print' => :'forcePrint',
        :'name' => :'name',
        :'payment_service' => :'paymentService',
        :'print_copies' => :'printCopies',
        :'tag' => :'tag',
        :'use_cash_drawer' => :'useCashDrawer',
        :'revenue_account' => :'revenueAccount',
        :'attach_payment_terminal_data_to_receipt' => :'attachPaymentTerminalDataToReceipt',
        :'max_payment_sum' => :'maxPaymentSum',
        :'balance' => :'balance',
        :'change_due' => :'changeDue',
        :'category' => :'category'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Boolean',
        :'id' => :'String',
        :'revision' => :'Integer',
        :'number' => :'String',
        :'allowed_balance_difference' => :'Float',
        :'currency' => :'ModelReference',
        :'force_customer_number' => :'Boolean',
        :'force_print' => :'Boolean',
        :'name' => :'String',
        :'payment_service' => :'Service',
        :'print_copies' => :'Integer',
        :'tag' => :'ModelReference',
        :'use_cash_drawer' => :'Boolean',
        :'revenue_account' => :'ModelReference',
        :'attach_payment_terminal_data_to_receipt' => :'Boolean',
        :'max_payment_sum' => :'Float',
        :'balance' => :'Boolean',
        :'change_due' => :'Boolean',
        :'category' => :'ModelReference'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaCloudClient::PaymentMethod` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaCloudClient::PaymentMethod`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'allowed_balance_difference')
        self.allowed_balance_difference = attributes[:'allowed_balance_difference']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'force_customer_number')
        self.force_customer_number = attributes[:'force_customer_number']
      end

      if attributes.key?(:'force_print')
        self.force_print = attributes[:'force_print']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'payment_service')
        self.payment_service = attributes[:'payment_service']
      end

      if attributes.key?(:'print_copies')
        self.print_copies = attributes[:'print_copies']
      end

      if attributes.key?(:'tag')
        self.tag = attributes[:'tag']
      end

      if attributes.key?(:'use_cash_drawer')
        self.use_cash_drawer = attributes[:'use_cash_drawer']
      end

      if attributes.key?(:'revenue_account')
        self.revenue_account = attributes[:'revenue_account']
      end

      if attributes.key?(:'attach_payment_terminal_data_to_receipt')
        self.attach_payment_terminal_data_to_receipt = attributes[:'attach_payment_terminal_data_to_receipt']
      end

      if attributes.key?(:'max_payment_sum')
        self.max_payment_sum = attributes[:'max_payment_sum']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'change_due')
        self.change_due = attributes[:'change_due']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          id == o.id &&
          revision == o.revision &&
          number == o.number &&
          allowed_balance_difference == o.allowed_balance_difference &&
          currency == o.currency &&
          force_customer_number == o.force_customer_number &&
          force_print == o.force_print &&
          name == o.name &&
          payment_service == o.payment_service &&
          print_copies == o.print_copies &&
          tag == o.tag &&
          use_cash_drawer == o.use_cash_drawer &&
          revenue_account == o.revenue_account &&
          attach_payment_terminal_data_to_receipt == o.attach_payment_terminal_data_to_receipt &&
          max_payment_sum == o.max_payment_sum &&
          balance == o.balance &&
          change_due == o.change_due &&
          category == o.category
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, id, revision, number, allowed_balance_difference, currency, force_customer_number, force_print, name, payment_service, print_copies, tag, use_cash_drawer, revenue_account, attach_payment_terminal_data_to_receipt, max_payment_sum, balance, change_due, category].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KoronaCloudClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
