=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 2.17.57
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.3.0

=end

require 'date'
require 'time'

module KoronaCloudClient
  class PromotionBenefitExtendedDiscountDiscountCalculation
    attr_accessor :operand

    attr_accessor :operator

    attr_accessor :position_selection_criteria

    attr_accessor :reference

    attr_accessor :sum_reference

    attr_accessor :receipt_discount

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'operand' => :'operand',
        :'operator' => :'operator',
        :'position_selection_criteria' => :'positionSelectionCriteria',
        :'reference' => :'reference',
        :'sum_reference' => :'sumReference',
        :'receipt_discount' => :'receiptDiscount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'operand' => :'Float',
        :'operator' => :'String',
        :'position_selection_criteria' => :'PromotionBenefitExtendedDiscountPositionSelectionCriteria',
        :'reference' => :'String',
        :'sum_reference' => :'String',
        :'receipt_discount' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaCloudClient::PromotionBenefitExtendedDiscountDiscountCalculation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaCloudClient::PromotionBenefitExtendedDiscountDiscountCalculation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'operand')
        self.operand = attributes[:'operand']
      end

      if attributes.key?(:'operator')
        self.operator = attributes[:'operator']
      end

      if attributes.key?(:'position_selection_criteria')
        self.position_selection_criteria = attributes[:'position_selection_criteria']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'sum_reference')
        self.sum_reference = attributes[:'sum_reference']
      end

      if attributes.key?(:'receipt_discount')
        self.receipt_discount = attributes[:'receipt_discount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      operator_validator = EnumAttributeValidator.new('String', ["EQUALS", "MINUS", "PERCENTAGE"])
      return false unless operator_validator.valid?(@operator)
      reference_validator = EnumAttributeValidator.new('String', ["RECEIPT", "REMAINDER", "SELECTION", "SUB_SELECTION"])
      return false unless reference_validator.valid?(@reference)
      sum_reference_validator = EnumAttributeValidator.new('String', ["RECEIPT", "REMAINDER", "SELECTION", "SUB_SELECTION"])
      return false unless sum_reference_validator.valid?(@sum_reference)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operator Object to be assigned
    def operator=(operator)
      validator = EnumAttributeValidator.new('String', ["EQUALS", "MINUS", "PERCENTAGE"])
      unless validator.valid?(operator)
        fail ArgumentError, "invalid value for \"operator\", must be one of #{validator.allowable_values}."
      end
      @operator = operator
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] reference Object to be assigned
    def reference=(reference)
      validator = EnumAttributeValidator.new('String', ["RECEIPT", "REMAINDER", "SELECTION", "SUB_SELECTION"])
      unless validator.valid?(reference)
        fail ArgumentError, "invalid value for \"reference\", must be one of #{validator.allowable_values}."
      end
      @reference = reference
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sum_reference Object to be assigned
    def sum_reference=(sum_reference)
      validator = EnumAttributeValidator.new('String', ["RECEIPT", "REMAINDER", "SELECTION", "SUB_SELECTION"])
      unless validator.valid?(sum_reference)
        fail ArgumentError, "invalid value for \"sum_reference\", must be one of #{validator.allowable_values}."
      end
      @sum_reference = sum_reference
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          operand == o.operand &&
          operator == o.operator &&
          position_selection_criteria == o.position_selection_criteria &&
          reference == o.reference &&
          sum_reference == o.sum_reference &&
          receipt_discount == o.receipt_discount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [operand, operator, position_selection_criteria, reference, sum_reference, receipt_discount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KoronaCloudClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
