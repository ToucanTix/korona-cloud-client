=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 3.1.64
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module KoronaCloudClient
  class PromotionBenefitCommonDiscount
    attr_accessor :appliance_target

    attr_accessor :appliance_type

    attr_accessor :target_commodity_group

    attr_accessor :target_product

    attr_accessor :target_tag

    attr_accessor :type

    attr_accessor :unit_type

    attr_accessor :value

    attr_accessor :max_iterations

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'appliance_target' => :'applianceTarget',
        :'appliance_type' => :'applianceType',
        :'target_commodity_group' => :'targetCommodityGroup',
        :'target_product' => :'targetProduct',
        :'target_tag' => :'targetTag',
        :'type' => :'type',
        :'unit_type' => :'unitType',
        :'value' => :'value',
        :'max_iterations' => :'maxIterations'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'appliance_target' => :'String',
        :'appliance_type' => :'String',
        :'target_commodity_group' => :'ModelReference',
        :'target_product' => :'ModelReference',
        :'target_tag' => :'ModelReference',
        :'type' => :'String',
        :'unit_type' => :'String',
        :'value' => :'Float',
        :'max_iterations' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaCloudClient::PromotionBenefitCommonDiscount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaCloudClient::PromotionBenefitCommonDiscount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'appliance_target')
        self.appliance_target = attributes[:'appliance_target']
      end

      if attributes.key?(:'appliance_type')
        self.appliance_type = attributes[:'appliance_type']
      end

      if attributes.key?(:'target_commodity_group')
        self.target_commodity_group = attributes[:'target_commodity_group']
      end

      if attributes.key?(:'target_product')
        self.target_product = attributes[:'target_product']
      end

      if attributes.key?(:'target_tag')
        self.target_tag = attributes[:'target_tag']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unit_type')
        self.unit_type = attributes[:'unit_type']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'max_iterations')
        self.max_iterations = attributes[:'max_iterations']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      appliance_target_validator = EnumAttributeValidator.new('String', ["PRODUCT", "PRODUCTS_OF_COMMODITY_GROUP", "PRODUCTS_WITH_TAG"])
      return false unless appliance_target_validator.valid?(@appliance_target)
      appliance_type_validator = EnumAttributeValidator.new('String', ["CHEAPEST_TARGET", "EACH_TARGET", "EQUAL_ON_EACH_TARGET", "MOST_EXPENSIVE_TARGET", "RECEIPT"])
      return false unless appliance_type_validator.valid?(@appliance_type)
      type_validator = EnumAttributeValidator.new('String', ["DISCOUNT", "FIXED_PRICE"])
      return false unless type_validator.valid?(@type)
      unit_type_validator = EnumAttributeValidator.new('String', ["FIXED", "PERCENTAGE"])
      return false unless unit_type_validator.valid?(@unit_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] appliance_target Object to be assigned
    def appliance_target=(appliance_target)
      validator = EnumAttributeValidator.new('String', ["PRODUCT", "PRODUCTS_OF_COMMODITY_GROUP", "PRODUCTS_WITH_TAG"])
      unless validator.valid?(appliance_target)
        fail ArgumentError, "invalid value for \"appliance_target\", must be one of #{validator.allowable_values}."
      end
      @appliance_target = appliance_target
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] appliance_type Object to be assigned
    def appliance_type=(appliance_type)
      validator = EnumAttributeValidator.new('String', ["CHEAPEST_TARGET", "EACH_TARGET", "EQUAL_ON_EACH_TARGET", "MOST_EXPENSIVE_TARGET", "RECEIPT"])
      unless validator.valid?(appliance_type)
        fail ArgumentError, "invalid value for \"appliance_type\", must be one of #{validator.allowable_values}."
      end
      @appliance_type = appliance_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["DISCOUNT", "FIXED_PRICE"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] unit_type Object to be assigned
    def unit_type=(unit_type)
      validator = EnumAttributeValidator.new('String', ["FIXED", "PERCENTAGE"])
      unless validator.valid?(unit_type)
        fail ArgumentError, "invalid value for \"unit_type\", must be one of #{validator.allowable_values}."
      end
      @unit_type = unit_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          appliance_target == o.appliance_target &&
          appliance_type == o.appliance_type &&
          target_commodity_group == o.target_commodity_group &&
          target_product == o.target_product &&
          target_tag == o.target_tag &&
          type == o.type &&
          unit_type == o.unit_type &&
          value == o.value &&
          max_iterations == o.max_iterations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [appliance_target, appliance_type, target_commodity_group, target_product, target_tag, type, unit_type, value, max_iterations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KoronaCloudClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
