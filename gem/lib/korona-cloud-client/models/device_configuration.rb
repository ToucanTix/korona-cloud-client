=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 3.1.64
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module KoronaCloudClient
  class DeviceConfiguration
    attr_accessor :port

    attr_accessor :device

    attr_accessor :baud_rate

    attr_accessor :init_command

    attr_accessor :init_command_variable

    attr_accessor :port_parameter

    attr_accessor :port_parameter_variable

    attr_accessor :default_device

    attr_accessor :device_parameters

    attr_accessor :production_type_settings

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'port' => :'port',
        :'device' => :'device',
        :'baud_rate' => :'baudRate',
        :'init_command' => :'initCommand',
        :'init_command_variable' => :'initCommandVariable',
        :'port_parameter' => :'portParameter',
        :'port_parameter_variable' => :'portParameterVariable',
        :'default_device' => :'defaultDevice',
        :'device_parameters' => :'deviceParameters',
        :'production_type_settings' => :'productionTypeSettings'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'port' => :'String',
        :'device' => :'String',
        :'baud_rate' => :'String',
        :'init_command' => :'String',
        :'init_command_variable' => :'ModelReference',
        :'port_parameter' => :'String',
        :'port_parameter_variable' => :'ModelReference',
        :'default_device' => :'Boolean',
        :'device_parameters' => :'Array<DeviceParameterItem>',
        :'production_type_settings' => :'Array<ProductionTypeSetting>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaCloudClient::DeviceConfiguration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaCloudClient::DeviceConfiguration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'device')
        self.device = attributes[:'device']
      end

      if attributes.key?(:'baud_rate')
        self.baud_rate = attributes[:'baud_rate']
      end

      if attributes.key?(:'init_command')
        self.init_command = attributes[:'init_command']
      end

      if attributes.key?(:'init_command_variable')
        self.init_command_variable = attributes[:'init_command_variable']
      end

      if attributes.key?(:'port_parameter')
        self.port_parameter = attributes[:'port_parameter']
      end

      if attributes.key?(:'port_parameter_variable')
        self.port_parameter_variable = attributes[:'port_parameter_variable']
      end

      if attributes.key?(:'default_device')
        self.default_device = attributes[:'default_device']
      end

      if attributes.key?(:'device_parameters')
        if (value = attributes[:'device_parameters']).is_a?(Array)
          self.device_parameters = value
        end
      end

      if attributes.key?(:'production_type_settings')
        if (value = attributes[:'production_type_settings']).is_a?(Array)
          self.production_type_settings = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      port_validator = EnumAttributeValidator.new('String', ["SYSTEMPRINTER_DEFAULT", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "USB_COM1", "USB_COM2", "USB_COM3", "USB_COM4", "USB_COM5", "USB_COM6", "USB_COM7", "LPT1", "LPT2", "LPT3", "USB_LPT1", "USB_LPT2", "NETWORK", "COMMAND", "CASHDRAWER_DEAMON_WINDOWS", "CASHDRAWER_DEAMON_LINUX", "USB_ACM1", "USB_ACM2", "USB_ACM3", "USB_ACM4", "USB_ACM5", "USB_ACM6", "USB_ACM7"])
      return false unless port_validator.valid?(@port)
      device_validator = EnumAttributeValidator.new('String', ["ESC_PRINTER", "WINCOR_PRINTER", "EPSON_PRINTER", "TEXT_PRINTER", "DEFAULT_BARCODE_READER", "DSP800_DISPLAY", "ESC_CUSTOMER_DISPLAY", "CD7220_DISPLAY", "WINCOR_KEY_LOCK", "JB1300_KEY_LOCK", "ADDIMAT_KEY_LOCK", "ESC_DRAWER", "BOCA_PRINTER", "ZEBRA_PRINTER", "EPSON_TM_L90_PRINTER", "DEFAULT_ZVT_CREDIT_AUTHORIZATION_TERMINAL", "SOVATO_CUSTOMER_DISPLAY", "KORONA_CASH_DRAWER", "DEFAULT_PAX_CREDIT_AUTHORIZATION_TERMINAL", "ZEBRA_LP_2824_PRINTER", "HP_PRINTER", "ZEBRA_TTP_2000_PRINTER", "DEFAULT_SIX_CREDIT_AUTHORIZATION_TERMINAL", "SCANPAL2_BARCODE_SCANNER", "MAXIM_INTEGRATED_KEY_LOCK", "TOSHIBA_KEY_LOCK", "DEFAULT_VERIFONE_POINT_CREDIT_AUTHORIZATION_TERMINAL", "BA63_CUSTOMER_DISPLAY", "DEFAULT_PAYWORKS_CREDIT_AUTHORIZATION_TERMINAL", "DEFAULT_GENIUS_CREDIT_AUTHORIZATION_TERMINAL", "TOSHIBA_DISPLAY", "JARLTECH_CUSTOMER_DISPLAY", "DEFAULT_ECONDUIT_CREDIT_AUTHORIZATION_TERMINAL", "ADYEN_CREDIT_AUTHORIZATION_TERMINAL", "DEJAVOO_CREDIT_AUTHORIZATION_TERMINAL", "AURES_PRINTER", "BLOCKCHYP_CREDIT_AUTHORIZATION_TERMINAL", "VIVA_WALLET_CREDIT_AUTHORIZATION_TERMINAL"])
      return false unless device_validator.valid?(@device)
      baud_rate_validator = EnumAttributeValidator.new('String', ["LINUX_9600", "LINUX_19200", "WIN_9600", "WIN_19200", "NONE"])
      return false unless baud_rate_validator.valid?(@baud_rate)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] port Object to be assigned
    def port=(port)
      validator = EnumAttributeValidator.new('String', ["SYSTEMPRINTER_DEFAULT", "COM1", "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "USB_COM1", "USB_COM2", "USB_COM3", "USB_COM4", "USB_COM5", "USB_COM6", "USB_COM7", "LPT1", "LPT2", "LPT3", "USB_LPT1", "USB_LPT2", "NETWORK", "COMMAND", "CASHDRAWER_DEAMON_WINDOWS", "CASHDRAWER_DEAMON_LINUX", "USB_ACM1", "USB_ACM2", "USB_ACM3", "USB_ACM4", "USB_ACM5", "USB_ACM6", "USB_ACM7"])
      unless validator.valid?(port)
        fail ArgumentError, "invalid value for \"port\", must be one of #{validator.allowable_values}."
      end
      @port = port
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device Object to be assigned
    def device=(device)
      validator = EnumAttributeValidator.new('String', ["ESC_PRINTER", "WINCOR_PRINTER", "EPSON_PRINTER", "TEXT_PRINTER", "DEFAULT_BARCODE_READER", "DSP800_DISPLAY", "ESC_CUSTOMER_DISPLAY", "CD7220_DISPLAY", "WINCOR_KEY_LOCK", "JB1300_KEY_LOCK", "ADDIMAT_KEY_LOCK", "ESC_DRAWER", "BOCA_PRINTER", "ZEBRA_PRINTER", "EPSON_TM_L90_PRINTER", "DEFAULT_ZVT_CREDIT_AUTHORIZATION_TERMINAL", "SOVATO_CUSTOMER_DISPLAY", "KORONA_CASH_DRAWER", "DEFAULT_PAX_CREDIT_AUTHORIZATION_TERMINAL", "ZEBRA_LP_2824_PRINTER", "HP_PRINTER", "ZEBRA_TTP_2000_PRINTER", "DEFAULT_SIX_CREDIT_AUTHORIZATION_TERMINAL", "SCANPAL2_BARCODE_SCANNER", "MAXIM_INTEGRATED_KEY_LOCK", "TOSHIBA_KEY_LOCK", "DEFAULT_VERIFONE_POINT_CREDIT_AUTHORIZATION_TERMINAL", "BA63_CUSTOMER_DISPLAY", "DEFAULT_PAYWORKS_CREDIT_AUTHORIZATION_TERMINAL", "DEFAULT_GENIUS_CREDIT_AUTHORIZATION_TERMINAL", "TOSHIBA_DISPLAY", "JARLTECH_CUSTOMER_DISPLAY", "DEFAULT_ECONDUIT_CREDIT_AUTHORIZATION_TERMINAL", "ADYEN_CREDIT_AUTHORIZATION_TERMINAL", "DEJAVOO_CREDIT_AUTHORIZATION_TERMINAL", "AURES_PRINTER", "BLOCKCHYP_CREDIT_AUTHORIZATION_TERMINAL", "VIVA_WALLET_CREDIT_AUTHORIZATION_TERMINAL"])
      unless validator.valid?(device)
        fail ArgumentError, "invalid value for \"device\", must be one of #{validator.allowable_values}."
      end
      @device = device
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] baud_rate Object to be assigned
    def baud_rate=(baud_rate)
      validator = EnumAttributeValidator.new('String', ["LINUX_9600", "LINUX_19200", "WIN_9600", "WIN_19200", "NONE"])
      unless validator.valid?(baud_rate)
        fail ArgumentError, "invalid value for \"baud_rate\", must be one of #{validator.allowable_values}."
      end
      @baud_rate = baud_rate
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          port == o.port &&
          device == o.device &&
          baud_rate == o.baud_rate &&
          init_command == o.init_command &&
          init_command_variable == o.init_command_variable &&
          port_parameter == o.port_parameter &&
          port_parameter_variable == o.port_parameter_variable &&
          default_device == o.default_device &&
          device_parameters == o.device_parameters &&
          production_type_settings == o.production_type_settings
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [port, device, baud_rate, init_command, init_command_variable, port_parameter, port_parameter_variable, default_device, device_parameters, production_type_settings].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KoronaCloudClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
