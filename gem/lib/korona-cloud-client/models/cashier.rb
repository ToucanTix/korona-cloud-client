=begin
#KORONA.cloud API v3

#Our api provides access to our cloud services

The version of the OpenAPI document: 3.1.64
Contact: support@combase.net
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module KoronaCloudClient
  class Cashier
    # indicates whether the object is active for use or not
    attr_accessor :active

    # global object uuid (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
    attr_accessor :id

    # the revision number of the object. revision numbers are unique per object-type. there is is no object of the same type with identical revision numbers.
    attr_accessor :revision

    # number of the object, like it is set in backoffice; will be removed when active=false
    attr_accessor :number

    attr_accessor :_alias

    attr_accessor :deactivated

    attr_accessor :email

    attr_accessor :firstname

    attr_accessor :surname

    attr_accessor :gender

    # by default, the md5 hash of the cashiers login code. on GET requests this can be changed via the `displayCashierCredentials=(HASH|PLAIN|NONE)` parameter, on POST and PATCH it is always assumed to be `PLAIN` text.
    attr_accessor :login_code

    # by default, the md5 hash of the cashiers login password. on GET requests this can be changed via the `displayCashierCredentials=(HASH|PLAIN|NONE)` parameter, on POST and PATCH it is always assumed to be `PLAIN` text.
    attr_accessor :login_password

    attr_accessor :permissions

    attr_accessor :role

    attr_accessor :bonus_points

    attr_accessor :background_color

    attr_accessor :organizational_units

    attr_accessor :cashier_role

    # yyyy-MM-dd
    attr_accessor :create_time

    # yyyy-MM-dd
    attr_accessor :last_receipt_time

    attr_accessor :organizational_unit_specific_numbers

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'active' => :'active',
        :'id' => :'id',
        :'revision' => :'revision',
        :'number' => :'number',
        :'_alias' => :'alias',
        :'deactivated' => :'deactivated',
        :'email' => :'email',
        :'firstname' => :'firstname',
        :'surname' => :'surname',
        :'gender' => :'gender',
        :'login_code' => :'loginCode',
        :'login_password' => :'loginPassword',
        :'permissions' => :'permissions',
        :'role' => :'role',
        :'bonus_points' => :'bonusPoints',
        :'background_color' => :'backgroundColor',
        :'organizational_units' => :'organizationalUnits',
        :'cashier_role' => :'cashierRole',
        :'create_time' => :'createTime',
        :'last_receipt_time' => :'lastReceiptTime',
        :'organizational_unit_specific_numbers' => :'organizationalUnitSpecificNumbers'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'active' => :'Boolean',
        :'id' => :'String',
        :'revision' => :'Integer',
        :'number' => :'String',
        :'_alias' => :'String',
        :'deactivated' => :'Boolean',
        :'email' => :'String',
        :'firstname' => :'String',
        :'surname' => :'String',
        :'gender' => :'String',
        :'login_code' => :'String',
        :'login_password' => :'String',
        :'permissions' => :'Array<String>',
        :'role' => :'String',
        :'bonus_points' => :'Integer',
        :'background_color' => :'Integer',
        :'organizational_units' => :'Array<ModelReference>',
        :'cashier_role' => :'ModelReference',
        :'create_time' => :'Date',
        :'last_receipt_time' => :'Date',
        :'organizational_unit_specific_numbers' => :'Array<OrganizationalUnitSpecificNumber>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `KoronaCloudClient::Cashier` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `KoronaCloudClient::Cashier`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'revision')
        self.revision = attributes[:'revision']
      end

      if attributes.key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.key?(:'_alias')
        self._alias = attributes[:'_alias']
      end

      if attributes.key?(:'deactivated')
        self.deactivated = attributes[:'deactivated']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.key?(:'surname')
        self.surname = attributes[:'surname']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'login_code')
        self.login_code = attributes[:'login_code']
      end

      if attributes.key?(:'login_password')
        self.login_password = attributes[:'login_password']
      end

      if attributes.key?(:'permissions')
        if (value = attributes[:'permissions']).is_a?(Array)
          self.permissions = value
        end
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'bonus_points')
        self.bonus_points = attributes[:'bonus_points']
      end

      if attributes.key?(:'background_color')
        self.background_color = attributes[:'background_color']
      end

      if attributes.key?(:'organizational_units')
        if (value = attributes[:'organizational_units']).is_a?(Array)
          self.organizational_units = value
        end
      end

      if attributes.key?(:'cashier_role')
        self.cashier_role = attributes[:'cashier_role']
      end

      if attributes.key?(:'create_time')
        self.create_time = attributes[:'create_time']
      end

      if attributes.key?(:'last_receipt_time')
        self.last_receipt_time = attributes[:'last_receipt_time']
      end

      if attributes.key?(:'organizational_unit_specific_numbers')
        if (value = attributes[:'organizational_unit_specific_numbers']).is_a?(Array)
          self.organizational_unit_specific_numbers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      gender_validator = EnumAttributeValidator.new('String', ["MALE", "FEMALE"])
      return false unless gender_validator.valid?(@gender)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["MALE", "FEMALE"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          active == o.active &&
          id == o.id &&
          revision == o.revision &&
          number == o.number &&
          _alias == o._alias &&
          deactivated == o.deactivated &&
          email == o.email &&
          firstname == o.firstname &&
          surname == o.surname &&
          gender == o.gender &&
          login_code == o.login_code &&
          login_password == o.login_password &&
          permissions == o.permissions &&
          role == o.role &&
          bonus_points == o.bonus_points &&
          background_color == o.background_color &&
          organizational_units == o.organizational_units &&
          cashier_role == o.cashier_role &&
          create_time == o.create_time &&
          last_receipt_time == o.last_receipt_time &&
          organizational_unit_specific_numbers == o.organizational_unit_specific_numbers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [active, id, revision, number, _alias, deactivated, email, firstname, surname, gender, login_code, login_password, permissions, role, bonus_points, background_color, organizational_units, cashier_role, create_time, last_receipt_time, organizational_unit_specific_numbers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = KoronaCloudClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
